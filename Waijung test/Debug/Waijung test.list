
Waijung test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc8  08007cc8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd0  08007cd0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000010  08007ce8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08007ce8  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017927  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a80  00000000  00000000  000379aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003a430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001019  00000000  00000000  0003b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175ea  00000000  00000000  0006431b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010eabc  00000000  00000000  0007b905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005988  00000000  00000000  0018a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0018fd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c70 	.word	0x08007c70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007c70 	.word	0x08007c70

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800051a:	f000 feb0 	bl	800127e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800051e:	f000 f8cf 	bl	80006c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000522:	f000 fb61 	bl	8000be8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000526:	f000 fb25 	bl	8000b74 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 800052a:	f000 f98d 	bl	8000848 <MX_LPUART1_UART_Init>
	MX_TIM3_Init();
 800052e:	f000 fa85 	bl	8000a3c <MX_TIM3_Init>
	MX_TIM5_Init();
 8000532:	f000 fad1 	bl	8000ad8 <MX_TIM5_Init>
	MX_ADC1_Init();
 8000536:	f000 f90f 	bl	8000758 <MX_ADC1_Init>
	MX_TIM1_Init();
 800053a:	f000 f9cf 	bl	80008dc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 800053e:	4850      	ldr	r0, [pc, #320]	; (8000680 <main+0x16c>)
 8000540:	f004 fa28 	bl	8004994 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000544:	2100      	movs	r1, #0
 8000546:	484e      	ldr	r0, [pc, #312]	; (8000680 <main+0x16c>)
 8000548:	f004 fb6e 	bl	8004c28 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054c:	217f      	movs	r1, #127	; 0x7f
 800054e:	484d      	ldr	r0, [pc, #308]	; (8000684 <main+0x170>)
 8000550:	f002 fa14 	bl	800297c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADCRead, 2);
 8000554:	2202      	movs	r2, #2
 8000556:	494c      	ldr	r1, [pc, #304]	; (8000688 <main+0x174>)
 8000558:	484a      	ldr	r0, [pc, #296]	; (8000684 <main+0x170>)
 800055a:	f001 fb01 	bl	8001b60 <HAL_ADC_Start_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, Rx, 4);
 800055e:	2204      	movs	r2, #4
 8000560:	494a      	ldr	r1, [pc, #296]	; (800068c <main+0x178>)
 8000562:	484b      	ldr	r0, [pc, #300]	; (8000690 <main+0x17c>)
 8000564:	f005 fef4 	bl	8006350 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim5);
 8000568:	484a      	ldr	r0, [pc, #296]	; (8000694 <main+0x180>)
 800056a:	f004 fa83 	bl	8004a74 <HAL_TIM_Base_Start_IT>

	upper = 0;
 800056e:	494a      	ldr	r1, [pc, #296]	; (8000698 <main+0x184>)
 8000570:	f04f 0200 	mov.w	r2, #0
 8000574:	f04f 0300 	mov.w	r3, #0
 8000578:	e9c1 2300 	strd	r2, r3, [r1]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint64_t timestamp = 0;
		int64_t currentTime = Micros();
 800057c:	f000 fbc0 	bl	8000d00 <Micros>
 8000580:	4602      	mov	r2, r0
 8000582:	460b      	mov	r3, r1
 8000584:	e9c7 2300 	strd	r2, r3, [r7]
		if (currentTime > timestamp) {
 8000588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800058c:	4943      	ldr	r1, [pc, #268]	; (800069c <main+0x188>)
 800058e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000592:	4290      	cmp	r0, r2
 8000594:	eb71 0303 	sbcs.w	r3, r1, r3
 8000598:	d2f0      	bcs.n	800057c <main+0x68>
			timestamp = currentTime + 5000; //us
 800059a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800059e:	f241 3188 	movw	r1, #5000	; 0x1388
 80005a2:	1854      	adds	r4, r2, r1
 80005a4:	f143 0500 	adc.w	r5, r3, #0
 80005a8:	4622      	mov	r2, r4
 80005aa:	462b      	mov	r3, r5
 80005ac:	493b      	ldr	r1, [pc, #236]	; (800069c <main+0x188>)
 80005ae:	e9c1 2300 	strd	r2, r3, [r1]
			LSB = ADCRead[0] & 0x00FF;
 80005b2:	4b35      	ldr	r3, [pc, #212]	; (8000688 <main+0x174>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <main+0x18c>)
 80005ba:	701a      	strb	r2, [r3, #0]
			MSB = ADCRead[0] >> 8;
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <main+0x174>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	0a1b      	lsrs	r3, r3, #8
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x190>)
 80005c8:	701a      	strb	r2, [r3, #0]
			Tx[0] = Header;
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <main+0x194>)
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <main+0x198>)
 80005d0:	701a      	strb	r2, [r3, #0]
			Tx[1] = LSB;
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <main+0x18c>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b35      	ldr	r3, [pc, #212]	; (80006ac <main+0x198>)
 80005d8:	705a      	strb	r2, [r3, #1]
			Tx[2] = MSB;
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <main+0x190>)
 80005dc:	781a      	ldrb	r2, [r3, #0]
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <main+0x198>)
 80005e0:	709a      	strb	r2, [r3, #2]
			Tx[3] = Termi;
 80005e2:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <main+0x19c>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <main+0x198>)
 80005e8:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit_DMA(&hlpuart1, Tx, 4);
 80005ea:	2204      	movs	r2, #4
 80005ec:	492f      	ldr	r1, [pc, #188]	; (80006ac <main+0x198>)
 80005ee:	4828      	ldr	r0, [pc, #160]	; (8000690 <main+0x17c>)
 80005f0:	f005 fe2e 	bl	8006250 <HAL_UART_Transmit_DMA>

			ReadRX = (Rx[2] << 8) | Rx[1];
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <main+0x178>)
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x178>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	b21b      	sxth	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b21a      	sxth	r2, r3
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <main+0x1a0>)
 8000608:	801a      	strh	r2, [r3, #0]
			pwmout = abs(ReadRX) * 1000 / 4095;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0x1a0>)
 800060c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bfb8      	it	lt
 8000614:	425b      	neglt	r3, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	461a      	mov	r2, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	fb02 f303 	mul.w	r3, r2, r3
 8000622:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <main+0x1a4>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	441a      	add	r2, r3
 800062a:	12d2      	asrs	r2, r2, #11
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	b21a      	sxth	r2, r3
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <main+0x1a8>)
 8000634:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwmout);
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <main+0x1a8>)
 8000638:	f9b3 2000 	ldrsh.w	r2, [r3]
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0x16c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
		if(ReadRX > 0) {
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <main+0x1a0>)
 8000644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	dd0c      	ble.n	8000666 <main+0x152>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f003 f8c0 	bl	80037d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f003 f8ba 	bl	80037d8 <HAL_GPIO_WritePin>
 8000664:	e78a      	b.n	800057c <main+0x68>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f003 f8b3 	bl	80037d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f003 f8ad 	bl	80037d8 <HAL_GPIO_WritePin>
	while (1) {
 800067e:	e77d      	b.n	800057c <main+0x68>
 8000680:	2000024c 	.word	0x2000024c
 8000684:	2000002c 	.word	0x2000002c
 8000688:	20000330 	.word	0x20000330
 800068c:	20000334 	.word	0x20000334
 8000690:	200000f8 	.word	0x200000f8
 8000694:	200002e4 	.word	0x200002e4
 8000698:	20000340 	.word	0x20000340
 800069c:	20000350 	.word	0x20000350
 80006a0:	20000348 	.word	0x20000348
 80006a4:	20000349 	.word	0x20000349
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000338 	.word	0x20000338
 80006b0:	20000001 	.word	0x20000001
 80006b4:	2000034a 	.word	0x2000034a
 80006b8:	80080081 	.word	0x80080081
 80006bc:	2000034c 	.word	0x2000034c

080006c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2238      	movs	r2, #56	; 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 faa2 	bl	8007c18 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f003 f8ce 	bl	8003884 <HAL_PWREx_ControlVoltageScaling>

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006fe:	2304      	movs	r3, #4
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLN = 85;
 8000702:	2355      	movs	r3, #85	; 0x55
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	4618      	mov	r0, r3
 8000718:	f003 f968 	bl	80039ec <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x66>
	Error_Handler();
 8000722:	f000 fb1f 	bl	8000d64 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	607b      	str	r3, [r7, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fc66 	bl	8004010 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8e>
	Error_Handler();
 800074a:	f000 fb0b 	bl	8000d64 <Error_Handler>
}
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC1_Init 0 */

/* USER CODE END ADC1_Init 0 */

ADC_MultiModeTypeDef multimode = { 0 };
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
ADC_ChannelConfTypeDef sConfig = { 0 };
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2220      	movs	r2, #32
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f007 fa51 	bl	8007c18 <memset>

/* USER CODE END ADC1_Init 1 */

/** Common config
 */
hadc1.Instance = ADC1;
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_ADC1_Init+0xe8>)
 8000778:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077c:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <MX_ADC1_Init+0xe8>)
 8000780:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000784:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_ADC1_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_ADC1_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
hadc1.Init.GainCompensation = 0;
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_ADC1_Init+0xe8>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC1_Init+0xe8>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	619a      	str	r2, [r3, #24]
hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
hadc1.Init.ContinuousConvMode = ENABLE;
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	775a      	strb	r2, [r3, #29]
hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	621a      	str	r2, [r3, #32]
hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	63da      	str	r2, [r3, #60]	; 0x3c
hadc1.Init.OversamplingMode = DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007e0:	4817      	ldr	r0, [pc, #92]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007e2:	f001 f801 	bl	80017e8 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x98>
	Error_Handler();
 80007ec:	f000 faba 	bl	8000d64 <Error_Handler>
}

/** Configure the ADC multi-mode
 */
multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_ADC1_Init+0xe8>)
 80007fc:	f002 f920 	bl	8002a40 <HAL_ADCEx_MultiModeConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0xb2>
	Error_Handler();
 8000806:	f000 faad 	bl	8000d64 <Error_Handler>
}

/** Configure Regular Channel
 */
sConfig.Channel = ADC_CHANNEL_1;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_ADC1_Init+0xec>)
 800080c:	607b      	str	r3, [r7, #4]
sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2306      	movs	r3, #6
 8000810:	60bb      	str	r3, [r7, #8]
sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000812:	2307      	movs	r3, #7
 8000814:	60fb      	str	r3, [r7, #12]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000816:	237f      	movs	r3, #127	; 0x7f
 8000818:	613b      	str	r3, [r7, #16]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081a:	2304      	movs	r3, #4
 800081c:	617b      	str	r3, [r7, #20]
sConfig.Offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0xe8>)
 8000828:	f001 fa8c 	bl	8001d44 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xde>
	Error_Handler();
 8000832:	f000 fa97 	bl	8000d64 <Error_Handler>
}
/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000002c 	.word	0x2000002c
 8000844:	04300002 	.word	0x04300002

08000848 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
/* USER CODE END LPUART1_Init 0 */

/* USER CODE BEGIN LPUART1_Init 1 */

/* USER CODE END LPUART1_Init 1 */
hlpuart1.Instance = LPUART1;
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000850:	601a      	str	r2, [r3, #0]
hlpuart1.Init.BaudRate = 115200;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 800088c:	f005 fc90 	bl	80061b0 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_LPUART1_UART_Init+0x52>
	Error_Handler();
 8000896:	f000 fa65 	bl	8000d64 <Error_Handler>
}
if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 800089a:	2100      	movs	r1, #0
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 800089e:	f007 f8f0 	bl	8007a82 <HAL_UARTEx_SetTxFifoThreshold>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LPUART1_UART_Init+0x64>
		!= HAL_OK) {
	Error_Handler();
 80008a8:	f000 fa5c 	bl	8000d64 <Error_Handler>
}
if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 80008b0:	f007 f925 	bl	8007afe <HAL_UARTEx_SetRxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_LPUART1_UART_Init+0x76>
		!= HAL_OK) {
	Error_Handler();
 80008ba:	f000 fa53 	bl	8000d64 <Error_Handler>
}
if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	f007 f8a6 	bl	8007a10 <HAL_UARTEx_DisableFifoMode>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_LPUART1_UART_Init+0x86>
	Error_Handler();
 80008ca:	f000 fa4b 	bl	8000d64 <Error_Handler>
}
/* USER CODE BEGIN LPUART1_Init 2 */

/* USER CODE END LPUART1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000f8 	.word	0x200000f8
 80008d8:	40008000 	.word	0x40008000

080008dc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09c      	sub	sp, #112	; 0x70
 80008e0:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM1_Init 0 */

/* USER CODE END TIM1_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 f97e 	bl	8007c18 <memset>

/* USER CODE BEGIN TIM1_Init 1 */

/* USER CODE END TIM1_Init 1 */
htim1.Instance = TIM1;
 800091c:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <MX_TIM1_Init+0x158>)
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <MX_TIM1_Init+0x15c>)
 8000920:	601a      	str	r2, [r3, #0]
htim1.Init.Prescaler = 170 - 1;
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000924:	22a9      	movs	r2, #169	; 0xa9
 8000926:	605a      	str	r2, [r3, #4]
htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <MX_TIM1_Init+0x158>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
htim1.Init.Period = 1000;
 800092e:	4b41      	ldr	r3, [pc, #260]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000934:	60da      	str	r2, [r3, #12]
htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
htim1.Init.RepetitionCounter = 0;
 800093c:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <MX_TIM1_Init+0x158>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000948:	483a      	ldr	r0, [pc, #232]	; (8000a34 <MX_TIM1_Init+0x158>)
 800094a:	f003 ffcb 	bl	80048e4 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x7c>
	Error_Handler();
 8000954:	f000 fa06 	bl	8000d64 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800095e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000962:	4619      	mov	r1, r3
 8000964:	4833      	ldr	r0, [pc, #204]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000966:	f004 fcd5 	bl	8005314 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x98>
	Error_Handler();
 8000970:	f000 f9f8 	bl	8000d64 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000974:	482f      	ldr	r0, [pc, #188]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000976:	f004 f8f5 	bl	8004b64 <HAL_TIM_PWM_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xa8>
	Error_Handler();
 8000980:	f000 f9f0 	bl	8000d64 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	657b      	str	r3, [r7, #84]	; 0x54
sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	65bb      	str	r3, [r7, #88]	; 0x58
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	65fb      	str	r3, [r7, #92]	; 0x5c
if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000990:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000994:	4619      	mov	r1, r3
 8000996:	4827      	ldr	r0, [pc, #156]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000998:	f005 fa9a 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0xca>
	Error_Handler();
 80009a2:	f000 f9df 	bl	8000d64 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2360      	movs	r3, #96	; 0x60
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
sConfigOC.Pulse = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	643b      	str	r3, [r7, #64]	; 0x40
sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b2:	2300      	movs	r3, #0
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64bb      	str	r3, [r7, #72]	; 0x48
sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64fb      	str	r3, [r7, #76]	; 0x4c
sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	653b      	str	r3, [r7, #80]	; 0x50
if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80009c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MX_TIM1_Init+0x158>)
 80009cc:	f004 fb8e 	bl	80050ec <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0xfe>
	Error_Handler();
 80009d6:	f000 f9c5 	bl	8000d64 <Error_Handler>
}
sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
sBreakDeadTimeConfig.DeadTime = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	61bb      	str	r3, [r7, #24]
sBreakDeadTimeConfig.BreakFilter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
sBreakDeadTimeConfig.Break2Filter = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000a18:	f005 faf0 	bl	8005ffc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x14a>
	Error_Handler();
 8000a22:	f000 f99f 	bl	8000d64 <Error_Handler>
}
/* USER CODE BEGIN TIM1_Init 2 */

/* USER CODE END TIM1_Init 2 */
HAL_TIM_MspPostInit(&htim1);
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM1_Init+0x158>)
 8000a28:	f000 fb52 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000a2c:	bf00      	nop
 8000a2e:	3770      	adds	r7, #112	; 0x70
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000024c 	.word	0x2000024c
 8000a38:	40012c00 	.word	0x40012c00

08000a3c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM3_Init 0 */

/* USER CODE END TIM3_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]

/* USER CODE BEGIN TIM3_Init 1 */

/* USER CODE END TIM3_Init 1 */
htim3.Instance = TIM3;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <MX_TIM3_Init+0x98>)
 8000a5e:	601a      	str	r2, [r3, #0]
htim3.Init.Prescaler = 0;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
htim3.Init.Period = 65535;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a72:	60da      	str	r2, [r3, #12]
htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a82:	f003 ff2f 	bl	80048e4 <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0x54>
	Error_Handler();
 8000a8c:	f000 f96a 	bl	8000d64 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	613b      	str	r3, [r7, #16]
if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000a9e:	f004 fc39 	bl	8005314 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0x70>
	Error_Handler();
 8000aa8:	f000 f95c 	bl	8000d64 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_TIM3_Init+0x94>)
 8000aba:	f005 fa09 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x8c>
	Error_Handler();
 8000ac4:	f000 f94e 	bl	8000d64 <Error_Handler>
}
/* USER CODE BEGIN TIM3_Init 2 */

/* USER CODE END TIM3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000298 	.word	0x20000298
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM5_Init 0 */

/* USER CODE END TIM5_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]

/* USER CODE BEGIN TIM5_Init 1 */

/* USER CODE END TIM5_Init 1 */
htim5.Instance = TIM5;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <MX_TIM5_Init+0x98>)
 8000afa:	601a      	str	r2, [r3, #0]
htim5.Init.Prescaler = 170 - 1;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000afe:	22a9      	movs	r2, #169	; 0xa9
 8000b00:	605a      	str	r2, [r3, #4]
htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
htim5.Init.Period = 4.294967295E9;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	60da      	str	r2, [r3, #12]
htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b1e:	f003 fee1 	bl	80048e4 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM5_Init+0x54>
	Error_Handler();
 8000b28:	f000 f91c 	bl	8000d64 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	613b      	str	r3, [r7, #16]
if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b3a:	f004 fbeb 	bl	8005314 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM5_Init+0x70>
	Error_Handler();
 8000b44:	f000 f90e 	bl	8000d64 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM5_Init+0x94>)
 8000b56:	f005 f9bb 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM5_Init+0x8c>
	Error_Handler();
 8000b60:	f000 f900 	bl	8000d64 <Error_Handler>
}
/* USER CODE BEGIN TIM5_Init 2 */

/* USER CODE END TIM5_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200002e4 	.word	0x200002e4
 8000b70:	40000c00 	.word	0x40000c00

08000b74 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

/* DMA controller clock enable */
__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_DMA_Init+0x70>)
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b7e:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <MX_DMA_Init+0x70>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6493      	str	r3, [r2, #72]	; 0x48
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_DMA_Init+0x70>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_DMA1_CLK_ENABLE();
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_DMA_Init+0x70>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_DMA_Init+0x70>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_DMA_Init+0x70>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

/* DMA interrupt init */
/* DMA1_Channel1_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f002 f929 	bl	8002e06 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bb4:	200b      	movs	r0, #11
 8000bb6:	f002 f940 	bl	8002e3a <HAL_NVIC_EnableIRQ>
/* DMA1_Channel2_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	200c      	movs	r0, #12
 8000bc0:	f002 f921 	bl	8002e06 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bc4:	200c      	movs	r0, #12
 8000bc6:	f002 f938 	bl	8002e3a <HAL_NVIC_EnableIRQ>
/* DMA1_Channel3_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	200d      	movs	r0, #13
 8000bd0:	f002 f919 	bl	8002e06 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bd4:	200d      	movs	r0, #13
 8000bd6:	f002 f930 	bl	8002e3a <HAL_NVIC_EnableIRQ>

}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	21e0      	movs	r1, #224	; 0xe0
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f002 fdb7 	bl	80037d8 <HAL_GPIO_WritePin>

/*Configure GPIO pin : B1_Pin */
GPIO_InitStruct.Pin = B1_Pin;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c74:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0xd8>)
 8000c82:	f002 fc27 	bl	80034d4 <HAL_GPIO_Init>

/*Configure GPIO pins : LD2_Pin PA6 PA7 */
GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 8000c86:	23e0      	movs	r3, #224	; 0xe0
 8000c88:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f002 fc18 	bl	80034d4 <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2028      	movs	r0, #40	; 0x28
 8000caa:	f002 f8ac 	bl	8002e06 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cae:	2028      	movs	r0, #40	; 0x28
 8000cb0:	f002 f8c3 	bl	8002e3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000800 	.word	0x48000800

08000cc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
if (htim == &htim5) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d10d      	bne.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	upper += 1;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cda:	1c54      	adds	r4, r2, #1
 8000cdc:	f143 0500 	adc.w	r5, r3, #0
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ce2:	e9c3 4500 	strd	r4, r5, [r3]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f002 fd8c 	bl	8003808 <HAL_GPIO_TogglePin>
}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf8:	200002e4 	.word	0x200002e4
 8000cfc:	20000340 	.word	0x20000340

08000d00 <Micros>:

uint64_t Micros() {
 8000d00:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
uint32_t lower = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
uint64_t time = 0;
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2300 	strd	r2, r3, [r7]
lower = __HAL_TIM_GET_COUNTER(&htim5);
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <Micros+0x5c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	60fb      	str	r3, [r7, #12]
time = (upper << 32) | lower;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <Micros+0x60>)
 8000d22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	4643      	mov	r3, r8
 8000d30:	2200      	movs	r2, #0
 8000d32:	68fe      	ldr	r6, [r7, #12]
 8000d34:	f04f 0c00 	mov.w	ip, #0
 8000d38:	4630      	mov	r0, r6
 8000d3a:	4661      	mov	r1, ip
 8000d3c:	ea42 0400 	orr.w	r4, r2, r0
 8000d40:	ea43 0501 	orr.w	r5, r3, r1
 8000d44:	e9c7 4500 	strd	r4, r5, [r7]
return time;
 8000d48:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200002e4 	.word	0x200002e4
 8000d60:	20000340 	.word	0x20000340

08000d64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000da6:	f002 fe11 	bl	80039cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09e      	sub	sp, #120	; 0x78
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2254      	movs	r2, #84	; 0x54
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 ff1d 	bl	8007c18 <memset>
  if(hadc->Instance==ADC1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de6:	d15f      	bne.n	8000ea8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000df2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fb25 	bl	8004448 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e04:	f7ff ffae 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_ADC_MspInit+0xf8>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <HAL_ADC_MspInit+0xf8>)
 8000e0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_ADC_MspInit+0xf8>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_ADC_MspInit+0xf8>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_ADC_MspInit+0xf8>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_ADC_MspInit+0xf8>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f002 fb41 	bl	80034d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_ADC_MspInit+0x100>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e82:	2220      	movs	r2, #32
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000e8e:	f001 ffef 	bl	8002e70 <HAL_DMA_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000e98:	f7ff ff64 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_ADC_MspInit+0xfc>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3778      	adds	r7, #120	; 0x78
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	20000098 	.word	0x20000098
 8000eb8:	40020030 	.word	0x40020030

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09e      	sub	sp, #120	; 0x78
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2254      	movs	r2, #84	; 0x54
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fe9b 	bl	8007c18 <memset>
  if(huart->Instance==LPUART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a4d      	ldr	r2, [pc, #308]	; (800101c <HAL_UART_MspInit+0x160>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	f040 8092 	bne.w	8001012 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eee:	2320      	movs	r3, #32
 8000ef0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 faa4 	bl	8004448 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f06:	f7ff ff2d 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f0a:	4b45      	ldr	r3, [pc, #276]	; (8001020 <HAL_UART_MspInit+0x164>)
 8000f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_UART_MspInit+0x164>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f16:	4b42      	ldr	r3, [pc, #264]	; (8001020 <HAL_UART_MspInit+0x164>)
 8000f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <HAL_UART_MspInit+0x164>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a3e      	ldr	r2, [pc, #248]	; (8001020 <HAL_UART_MspInit+0x164>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <HAL_UART_MspInit+0x164>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f3a:	230c      	movs	r3, #12
 8000f3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f002 fabc 	bl	80034d4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f5e:	4a32      	ldr	r2, [pc, #200]	; (8001028 <HAL_UART_MspInit+0x16c>)
 8000f60:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f64:	2223      	movs	r2, #35	; 0x23
 8000f66:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000f94:	f001 ff6c 	bl	8002e70 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f9e:	f7ff fee1 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000fa6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <HAL_UART_MspInit+0x168>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <HAL_UART_MspInit+0x174>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fb6:	2222      	movs	r2, #34	; 0x22
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <HAL_UART_MspInit+0x170>)
 8000fe6:	f001 ff43 	bl	8002e70 <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000ff0:	f7ff feb8 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_UART_MspInit+0x170>)
 8000ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_UART_MspInit+0x170>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	205b      	movs	r0, #91	; 0x5b
 8001008:	f001 fefd 	bl	8002e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800100c:	205b      	movs	r0, #91	; 0x5b
 800100e:	f001 ff14 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3778      	adds	r7, #120	; 0x78
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40008000 	.word	0x40008000
 8001020:	40021000 	.word	0x40021000
 8001024:	2000018c 	.word	0x2000018c
 8001028:	40020008 	.word	0x40020008
 800102c:	200001ec 	.word	0x200001ec
 8001030:	4002001c 	.word	0x4002001c

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <HAL_TIM_Base_MspInit+0x8c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10c      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 800104c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800105e:	e02a      	b.n	80010b6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_TIM_Base_MspInit+0x94>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10c      	bne.n	8001084 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
}
 8001082:	e018      	b.n	80010b6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_TIM_Base_MspInit+0x98>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d113      	bne.n	80010b6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_TIM_Base_MspInit+0x90>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2032      	movs	r0, #50	; 0x32
 80010ac:	f001 feab 	bl	8002e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010b0:	2032      	movs	r0, #50	; 0x32
 80010b2:	f001 fec2 	bl	8002e3a <HAL_NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40000400 	.word	0x40000400
 80010cc:	40000c00 	.word	0x40000c00

080010d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_TIM_MspPostInit+0x64>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d11b      	bne.n	800112a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110a:	2301      	movs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_TIM_MspPostInit+0x6c>)
 8001126:	f002 f9d5 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012c00 	.word	0x40012c00
 8001138:	40021000 	.word	0x40021000
 800113c:	48000800 	.word	0x48000800

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f8ca 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <DMA1_Channel1_IRQHandler+0x10>)
 800119a:	f002 f84c 	bl	8003236 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000018c 	.word	0x2000018c

080011a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <DMA1_Channel2_IRQHandler+0x10>)
 80011ae:	f002 f842 	bl	8003236 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001ec 	.word	0x200001ec

080011bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Channel3_IRQHandler+0x10>)
 80011c2:	f002 f838 	bl	8003236 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000098 	.word	0x20000098

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d8:	f002 fb30 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM5_IRQHandler+0x10>)
 80011e6:	f003 fe31 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002e4 	.word	0x200002e4

080011f4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <LPUART1_IRQHandler+0x10>)
 80011fa:	f005 f8f5 	bl	80063e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000f8 	.word	0x200000f8

08001208 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff ffea 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <LoopForever+0x6>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <LoopForever+0xe>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	; (8001278 <LoopForever+0x16>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f006 fce5 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125e:	f7ff f959 	bl	8000514 <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   r0, =_estack
 8001264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001270:	08007cd8 	.word	0x08007cd8
  ldr r2, =_sbss
 8001274:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001278:	2000035c 	.word	0x2000035c

0800127c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_2_IRQHandler>

0800127e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f001 fdb1 	bl	8002df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f80e 	bl	80012b0 <HAL_InitTick>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	e001      	b.n	80012a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a0:	f7ff fd66 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a4:	79fb      	ldrb	r3, [r7, #7]

}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_InitTick+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d022      	beq.n	800130a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_InitTick+0x6c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_InitTick+0x68>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fdbc 	bl	8002e56 <HAL_SYSTICK_Config>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d809      	bhi.n	80012fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295
 80012f2:	f001 fd88 	bl	8002e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_InitTick+0x70>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e007      	b.n	800130e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e004      	b.n	800130e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000004 	.word	0x20000004
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_IncTick+0x1c>)
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000358 	.word	0x20000358
 8001344:	2000000c 	.word	0x2000000c

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000358 	.word	0x20000358

08001360 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	609a      	str	r2, [r3, #8]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3360      	adds	r3, #96	; 0x60
 80013da:	461a      	mov	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <LL_ADC_SetOffset+0x44>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	03fff000 	.word	0x03fff000

08001410 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3360      	adds	r3, #96	; 0x60
 800141e:	461a      	mov	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3360      	adds	r3, #96	; 0x60
 800144c:	461a      	mov	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001472:	b480      	push	{r7}
 8001474:	b087      	sub	sp, #28
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3360      	adds	r3, #96	; 0x60
 8001482:	461a      	mov	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	431a      	orrs	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3360      	adds	r3, #96	; 0x60
 80014b8:	461a      	mov	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	615a      	str	r2, [r3, #20]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800152a:	b480      	push	{r7}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3330      	adds	r3, #48	; 0x30
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	211f      	movs	r1, #31
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	401a      	ands	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	0e9b      	lsrs	r3, r3, #26
 8001562:	f003 011f 	and.w	r1, r3, #31
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001576:	bf00      	nop
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001582:	b480      	push	{r7}
 8001584:	b087      	sub	sp, #28
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3314      	adds	r3, #20
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	0e5b      	lsrs	r3, r3, #25
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	0d1b      	lsrs	r3, r3, #20
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2107      	movs	r1, #7
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	0d1b      	lsrs	r3, r3, #20
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0318 	and.w	r3, r3, #24
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <LL_ADC_SetChannelSingleDiff+0x44>)
 80015fc:	40d9      	lsrs	r1, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	400b      	ands	r3, r1
 8001602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001606:	431a      	orrs	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0007ffff 	.word	0x0007ffff

08001620 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 031f 	and.w	r3, r3, #31
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800164c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6093      	str	r3, [r2, #8]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001674:	d101      	bne.n	800167a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001698:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800169c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016c4:	d101      	bne.n	80016ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <LL_ADC_IsEnabled+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_ADC_IsEnabled+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d101      	bne.n	8001766 <LL_ADC_IsDisableOngoing+0x18>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <LL_ADC_IsDisableOngoing+0x1a>
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001784:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001788:	f043 0204 	orr.w	r2, r3, #4
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d101      	bne.n	80017b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d101      	bne.n	80017da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1a9      	b.n	8001b56 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fad1 	bl	8000db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff19 	bl	8001660 <LL_ADC_IsDeepPowerDownEnabled>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff feff 	bl	800163c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff34 	bl	80016b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff18 	bl	8001688 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001858:	4b9c      	ldr	r3, [pc, #624]	; (8001acc <HAL_ADC_Init+0x2e4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	4a9c      	ldr	r2, [pc, #624]	; (8001ad0 <HAL_ADC_Init+0x2e8>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800186c:	e002      	b.n	8001874 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff16 	bl	80016b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	f043 0210 	orr.w	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff76 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 80018b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 8142 	bne.w	8001b44 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 813e 	bne.w	8001b44 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff23 	bl	8001728 <LL_ADC_IsEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d141      	bne.n	800196c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f0:	d004      	beq.n	80018fc <HAL_ADC_Init+0x114>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a77      	ldr	r2, [pc, #476]	; (8001ad4 <HAL_ADC_Init+0x2ec>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10f      	bne.n	800191c <HAL_ADC_Init+0x134>
 80018fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001900:	f7ff ff12 	bl	8001728 <LL_ADC_IsEnabled>
 8001904:	4604      	mov	r4, r0
 8001906:	4873      	ldr	r0, [pc, #460]	; (8001ad4 <HAL_ADC_Init+0x2ec>)
 8001908:	f7ff ff0e 	bl	8001728 <LL_ADC_IsEnabled>
 800190c:	4603      	mov	r3, r0
 800190e:	4323      	orrs	r3, r4
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e012      	b.n	8001942 <HAL_ADC_Init+0x15a>
 800191c:	486e      	ldr	r0, [pc, #440]	; (8001ad8 <HAL_ADC_Init+0x2f0>)
 800191e:	f7ff ff03 	bl	8001728 <LL_ADC_IsEnabled>
 8001922:	4604      	mov	r4, r0
 8001924:	486d      	ldr	r0, [pc, #436]	; (8001adc <HAL_ADC_Init+0x2f4>)
 8001926:	f7ff feff 	bl	8001728 <LL_ADC_IsEnabled>
 800192a:	4603      	mov	r3, r0
 800192c:	431c      	orrs	r4, r3
 800192e:	486c      	ldr	r0, [pc, #432]	; (8001ae0 <HAL_ADC_Init+0x2f8>)
 8001930:	f7ff fefa 	bl	8001728 <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	4323      	orrs	r3, r4
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194e:	d004      	beq.n	800195a <HAL_ADC_Init+0x172>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a5f      	ldr	r2, [pc, #380]	; (8001ad4 <HAL_ADC_Init+0x2ec>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x176>
 800195a:	4a62      	ldr	r2, [pc, #392]	; (8001ae4 <HAL_ADC_Init+0x2fc>)
 800195c:	e000      	b.n	8001960 <HAL_ADC_Init+0x178>
 800195e:	4a62      	ldr	r2, [pc, #392]	; (8001ae8 <HAL_ADC_Init+0x300>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f7ff fcfa 	bl	8001360 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7f5b      	ldrb	r3, [r3, #29]
 8001970:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001976:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800197c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001982:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800198a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001996:	2b01      	cmp	r3, #1
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	3b01      	subs	r3, #1
 80019a0:	045b      	lsls	r3, r3, #17
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d009      	beq.n	80019c4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b48      	ldr	r3, [pc, #288]	; (8001aec <HAL_ADC_Init+0x304>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fee5 	bl	80017c2 <LL_ADC_INJ_IsConversionOngoing>
 80019f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d17f      	bne.n	8001b00 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d17c      	bne.n	8001b00 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d017      	beq.n	8001a68 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6911      	ldr	r1, [r2, #16]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001a66:	e013      	b.n	8001a90 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d12a      	bne.n	8001af0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001abc:	430a      	orrs	r2, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	e019      	b.n	8001b00 <HAL_ADC_Init+0x318>
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	053e2d63 	.word	0x053e2d63
 8001ad4:	50000100 	.word	0x50000100
 8001ad8:	50000400 	.word	0x50000400
 8001adc:	50000500 	.word	0x50000500
 8001ae0:	50000600 	.word	0x50000600
 8001ae4:	50000300 	.word	0x50000300
 8001ae8:	50000700 	.word	0x50000700
 8001aec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10c      	bne.n	8001b22 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f023 010f 	bic.w	r1, r3, #15
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b20:	e007      	b.n	8001b32 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020f 	bic.w	r2, r2, #15
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b42:	e007      	b.n	8001b54 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop

08001b60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b74:	d004      	beq.n	8001b80 <HAL_ADC_Start_DMA+0x20>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	; (8001ce4 <HAL_ADC_Start_DMA+0x184>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x24>
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_ADC_Start_DMA+0x188>)
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_Start_DMA+0x26>
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_ADC_Start_DMA+0x18c>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fd4a 	bl	8001620 <LL_ADC_GetMultimode>
 8001b8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe02 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 809b 	bne.w	8001cd6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Start_DMA+0x4e>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e096      	b.n	8001cdc <HAL_ADC_Start_DMA+0x17c>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_ADC_Start_DMA+0x190>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d008      	beq.n	8001bd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d002      	beq.n	8001bd2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b09      	cmp	r3, #9
 8001bd0:	d17a      	bne.n	8001cc8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fcf6 	bl	80025c4 <ADC_Enable>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d16d      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <HAL_ADC_Start_DMA+0x184>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_ADC_Start_DMA+0xb4>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <HAL_ADC_Start_DMA+0x194>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d002      	beq.n	8001c10 <HAL_ADC_Start_DMA+0xb0>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e003      	b.n	8001c18 <HAL_ADC_Start_DMA+0xb8>
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_ADC_Start_DMA+0x198>)
 8001c12:	e001      	b.n	8001c18 <HAL_ADC_Start_DMA+0xb8>
 8001c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d002      	beq.n	8001c26 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f023 0206 	bic.w	r2, r3, #6
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	661a      	str	r2, [r3, #96]	; 0x60
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_ADC_Start_DMA+0x19c>)
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_ADC_Start_DMA+0x1a0>)
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_ADC_Start_DMA+0x1a4>)
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	221c      	movs	r2, #28
 8001c70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0210 	orr.w	r2, r2, #16
 8001c88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3340      	adds	r3, #64	; 0x40
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f001 f989 	bl	8002fc0 <HAL_DMA_Start_IT>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fd5c 	bl	8001774 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001cbc:	e00d      	b.n	8001cda <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001cc6:	e008      	b.n	8001cda <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001cd4:	e001      	b.n	8001cda <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	50000100 	.word	0x50000100
 8001ce8:	50000300 	.word	0x50000300
 8001cec:	50000700 	.word	0x50000700
 8001cf0:	50000600 	.word	0x50000600
 8001cf4:	50000500 	.word	0x50000500
 8001cf8:	50000400 	.word	0x50000400
 8001cfc:	080027af 	.word	0x080027af
 8001d00:	08002887 	.word	0x08002887
 8001d04:	080028a3 	.word	0x080028a3

08001d08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b6      	sub	sp, #216	; 0xd8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x24>
 8001d62:	2302      	movs	r3, #2
 8001d64:	f000 bc13 	b.w	800258e <HAL_ADC_ConfigChannel+0x84a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fd11 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 83f3 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f7ff fbcb 	bl	800152a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fcff 	bl	800179c <LL_ADC_REG_IsConversionOngoing>
 8001d9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fd0b 	bl	80017c2 <LL_ADC_INJ_IsConversionOngoing>
 8001dac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 81d9 	bne.w	800216c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 81d4 	bne.w	800216c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dcc:	d10f      	bne.n	8001dee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7ff fbd2 	bl	8001582 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fb79 	bl	80014de <LL_ADC_SetSamplingTimeCommonConfig>
 8001dec:	e00e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f7ff fbc1 	bl	8001582 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fb69 	bl	80014de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d022      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6919      	ldr	r1, [r3, #16]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e3e:	f7ff fac3 	bl	80013c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7ff fb0f 	bl	8001472 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d102      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x126>
 8001e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e68:	e000      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x128>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff fb1b 	bl	80014a8 <LL_ADC_SetOffsetSaturation>
 8001e72:	e17b      	b.n	800216c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fac8 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x15c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fabd 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	e01e      	b.n	8001ede <HAL_ADC_ConfigChannel+0x19a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fab2 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e004      	b.n	8001edc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x1b2>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	e018      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1e4>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e004      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001f1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fa81 	bl	800143c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fa65 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x222>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fa5a 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	e01e      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x260>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fa4f 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e004      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x278>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	e018      	b.n	8001fee <HAL_ADC_ConfigChannel+0x2aa>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e004      	b.n	8001fee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d106      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fa1e 	bl	800143c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2102      	movs	r1, #2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fa02 	bl	8001410 <LL_ADC_GetOffsetChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_ADC_ConfigChannel+0x2e8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2102      	movs	r1, #2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f9f7 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	f003 021f 	and.w	r2, r3, #31
 800202a:	e01e      	b.n	800206a <HAL_ADC_ConfigChannel+0x326>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2102      	movs	r1, #2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f9ec 	bl	8001410 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800204a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800204e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e004      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800205e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x33e>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0e9b      	lsrs	r3, r3, #26
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	e016      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x36c>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002096:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800209a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80020a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2102      	movs	r1, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f9bd 	bl	800143c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2103      	movs	r1, #3
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f9a1 	bl	8001410 <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x3aa>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2103      	movs	r1, #3
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f996 	bl	8001410 <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	e017      	b.n	800211e <HAL_ADC_ConfigChannel+0x3da>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2103      	movs	r1, #3
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f98b 	bl	8001410 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002108:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800210a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e003      	b.n	800211c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x3f2>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	0e9b      	lsrs	r3, r3, #26
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	e011      	b.n	800215a <HAL_ADC_ConfigChannel+0x416>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002146:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e003      	b.n	800215a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800215a:	429a      	cmp	r2, r3
 800215c:	d106      	bne.n	800216c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	2103      	movs	r1, #3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f968 	bl	800143c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fad9 	bl	8001728 <LL_ADC_IsEnabled>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 813d 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fa24 	bl	80015d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4aa2      	ldr	r2, [pc, #648]	; (8002420 <HAL_ADC_ConfigChannel+0x6dc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 812e 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x480>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e019      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x4b4>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e003      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80021e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	bf94      	ite	ls
 80021f2:	2301      	movls	r3, #1
 80021f4:	2300      	movhi	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d079      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x4d4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	3301      	adds	r3, #1
 8002210:	069b      	lsls	r3, r3, #26
 8002212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002216:	e015      	b.n	8002244 <HAL_ADC_ConfigChannel+0x500>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002228:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800222a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x520>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	3301      	adds	r3, #1
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	2101      	movs	r1, #1
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	e017      	b.n	8002294 <HAL_ADC_ConfigChannel+0x550>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e003      	b.n	8002288 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	ea42 0103 	orr.w	r1, r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x576>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	051b      	lsls	r3, r3, #20
 80022b8:	e018      	b.n	80022ec <HAL_ADC_ConfigChannel+0x5a8>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e003      	b.n	80022de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80022d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ec:	430b      	orrs	r3, r1
 80022ee:	e07e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_ADC_ConfigChannel+0x5c8>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	3301      	adds	r3, #1
 8002304:	069b      	lsls	r3, r3, #26
 8002306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800230a:	e015      	b.n	8002338 <HAL_ADC_ConfigChannel+0x5f4>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	069b      	lsls	r3, r3, #26
 8002334:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x614>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	3301      	adds	r3, #1
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	e017      	b.n	8002388 <HAL_ADC_ConfigChannel+0x644>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	61fb      	str	r3, [r7, #28]
  return result;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e003      	b.n	800237c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	ea42 0103 	orr.w	r1, r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x670>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	051b      	lsls	r3, r3, #20
 80023ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b2:	e01b      	b.n	80023ec <HAL_ADC_ConfigChannel+0x6a8>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	613b      	str	r3, [r7, #16]
  return result;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 021f 	and.w	r2, r3, #31
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	3b1e      	subs	r3, #30
 80023e6:	051b      	lsls	r3, r3, #20
 80023e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7ff f8c5 	bl	8001582 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_ADC_ConfigChannel+0x6e0>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80be 	beq.w	8002582 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240e:	d004      	beq.n	800241a <HAL_ADC_ConfigChannel+0x6d6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_ADC_ConfigChannel+0x6e4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10a      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x6ec>
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_ADC_ConfigChannel+0x6e8>)
 800241c:	e009      	b.n	8002432 <HAL_ADC_ConfigChannel+0x6ee>
 800241e:	bf00      	nop
 8002420:	407f0000 	.word	0x407f0000
 8002424:	80080000 	.word	0x80080000
 8002428:	50000100 	.word	0x50000100
 800242c:	50000300 	.word	0x50000300
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_ADC_ConfigChannel+0x854>)
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe ffba 	bl	80013ac <LL_ADC_GetCommonPathInternalCh>
 8002438:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a56      	ldr	r2, [pc, #344]	; (800259c <HAL_ADC_ConfigChannel+0x858>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x70c>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <HAL_ADC_ConfigChannel+0x85c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d13a      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d134      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002464:	d005      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x72e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <HAL_ADC_ConfigChannel+0x860>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f040 8085 	bne.w	800257c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247a:	d004      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x742>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_ADC_ConfigChannel+0x864>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x746>
 8002486:	4a49      	ldr	r2, [pc, #292]	; (80025ac <HAL_ADC_ConfigChannel+0x868>)
 8002488:	e000      	b.n	800248c <HAL_ADC_ConfigChannel+0x748>
 800248a:	4a43      	ldr	r2, [pc, #268]	; (8002598 <HAL_ADC_ConfigChannel+0x854>)
 800248c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002490:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f7fe ff75 	bl	8001386 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800249c:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_ADC_ConfigChannel+0x86c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_ADC_ConfigChannel+0x870>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024b6:	e002      	b.n	80024be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c4:	e05a      	b.n	800257c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <HAL_ADC_ConfigChannel+0x874>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d125      	bne.n	800251c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d11f      	bne.n	800251c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <HAL_ADC_ConfigChannel+0x864>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d104      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x7ac>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <HAL_ADC_ConfigChannel+0x878>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d047      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f8:	d004      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x7c0>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2a      	ldr	r2, [pc, #168]	; (80025a8 <HAL_ADC_ConfigChannel+0x864>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x7c4>
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_ADC_ConfigChannel+0x868>)
 8002506:	e000      	b.n	800250a <HAL_ADC_ConfigChannel+0x7c6>
 8002508:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_ADC_ConfigChannel+0x854>)
 800250a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f7fe ff36 	bl	8001386 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800251a:	e031      	b.n	8002580 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_ADC_ConfigChannel+0x87c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d12d      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d127      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <HAL_ADC_ConfigChannel+0x864>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002544:	d004      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x80c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_ADC_ConfigChannel+0x864>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x810>
 8002550:	4a16      	ldr	r2, [pc, #88]	; (80025ac <HAL_ADC_ConfigChannel+0x868>)
 8002552:	e000      	b.n	8002556 <HAL_ADC_ConfigChannel+0x812>
 8002554:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_ADC_ConfigChannel+0x854>)
 8002556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800255a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7fe ff10 	bl	8001386 <LL_ADC_SetCommonPathInternalCh>
 8002566:	e00c      	b.n	8002582 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800257a:	e002      	b.n	8002582 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800257c:	bf00      	nop
 800257e:	e000      	b.n	8002582 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002580:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800258a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800258e:	4618      	mov	r0, r3
 8002590:	37d8      	adds	r7, #216	; 0xd8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	50000700 	.word	0x50000700
 800259c:	c3210000 	.word	0xc3210000
 80025a0:	90c00010 	.word	0x90c00010
 80025a4:	50000600 	.word	0x50000600
 80025a8:	50000100 	.word	0x50000100
 80025ac:	50000300 	.word	0x50000300
 80025b0:	20000004 	.word	0x20000004
 80025b4:	053e2d63 	.word	0x053e2d63
 80025b8:	c7520000 	.word	0xc7520000
 80025bc:	50000500 	.word	0x50000500
 80025c0:	cb840000 	.word	0xcb840000

080025c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f8a7 	bl	8001728 <LL_ADC_IsEnabled>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d176      	bne.n	80026ce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <ADC_Enable+0x114>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00d      	beq.n	800260a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e062      	b.n	80026d0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff f862 	bl	80016d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261c:	d004      	beq.n	8002628 <ADC_Enable+0x64>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <ADC_Enable+0x118>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <ADC_Enable+0x68>
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <ADC_Enable+0x11c>)
 800262a:	e000      	b.n	800262e <ADC_Enable+0x6a>
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <ADC_Enable+0x120>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe febc 	bl	80013ac <LL_ADC_GetCommonPathInternalCh>
 8002634:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <ADC_Enable+0x124>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	4a29      	ldr	r2, [pc, #164]	; (80026ec <ADC_Enable+0x128>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002658:	e002      	b.n	8002660 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f9      	bne.n	800265a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002666:	f7fe fe6f 	bl	8001348 <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800266c:	e028      	b.n	80026c0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f858 	bl	8001728 <LL_ADC_IsEnabled>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d104      	bne.n	8002688 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f828 	bl	80016d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002688:	f7fe fe5e 	bl	8001348 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d914      	bls.n	80026c0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d00d      	beq.n	80026c0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	f043 0210 	orr.w	r2, r3, #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d1cf      	bne.n	800266e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	8000003f 	.word	0x8000003f
 80026dc:	50000100 	.word	0x50000100
 80026e0:	50000300 	.word	0x50000300
 80026e4:	50000700 	.word	0x50000700
 80026e8:	20000004 	.word	0x20000004
 80026ec:	053e2d63 	.word	0x053e2d63

080026f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f826 	bl	800174e <LL_ADC_IsDisableOngoing>
 8002702:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f80d 	bl	8001728 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d047      	beq.n	80027a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d144      	bne.n	80027a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030d 	and.w	r3, r3, #13
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10c      	bne.n	8002742 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe ffe7 	bl	8001700 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2203      	movs	r2, #3
 8002738:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800273a:	f7fe fe05 	bl	8001348 <HAL_GetTick>
 800273e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002740:	e029      	b.n	8002796 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	f043 0210 	orr.w	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	f043 0201 	orr.w	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e023      	b.n	80027a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800275e:	f7fe fdf3 	bl	8001348 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d914      	bls.n	8002796 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e007      	b.n	80027a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1dc      	bne.n	800275e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d14b      	bne.n	8002860 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d021      	beq.n	8002826 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fe8c 	bl	8001504 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d032      	beq.n	8002858 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12b      	bne.n	8002858 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11f      	bne.n	8002858 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	65da      	str	r2, [r3, #92]	; 0x5c
 8002824:	e018      	b.n	8002858 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fa55 	bl	8001d08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800285e:	e00e      	b.n	800287e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fa5f 	bl	8001d30 <HAL_ADC_ErrorCallback>
}
 8002872:	e004      	b.n	800287e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fa41 	bl	8001d1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff fa31 	bl	8001d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <LL_ADC_IsEnabled>:
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <LL_ADC_IsEnabled+0x18>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_ADC_IsEnabled+0x1a>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_StartCalibration>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800290e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002918:	4313      	orrs	r3, r2
 800291a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_IsCalibrationOnGoing>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800293e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002942:	d101      	bne.n	8002948 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_REG_IsConversionOngoing>:
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d101      	bne.n	800296e <LL_ADC_REG_IsConversionOngoing+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ADCEx_Calibration_Start+0x1c>
 8002994:	2302      	movs	r3, #2
 8002996:	e04d      	b.n	8002a34 <HAL_ADCEx_Calibration_Start+0xb8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fea5 	bl	80026f0 <ADC_Disable>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d136      	bne.n	8002a1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b8:	f023 0302 	bic.w	r3, r3, #2
 80029bc:	f043 0202 	orr.w	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6839      	ldr	r1, [r7, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff96 	bl	80028fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029d0:	e014      	b.n	80029fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3301      	adds	r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_ADCEx_Calibration_Start+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d90d      	bls.n	80029fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	f023 0312 	bic.w	r3, r3, #18
 80029e8:	f043 0210 	orr.w	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e01b      	b.n	8002a34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff94 	bl	800292e <LL_ADC_IsCalibrationOnGoing>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e2      	bne.n	80029d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	f023 0303 	bic.w	r3, r3, #3
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a1c:	e005      	b.n	8002a2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	0004de01 	.word	0x0004de01

08002a40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b0a1      	sub	sp, #132	; 0x84
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e0e7      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a66:	2300      	movs	r3, #0
 8002a68:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a76:	d102      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	e009      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6e      	ldr	r2, [pc, #440]	; (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a88:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	e001      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0be      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff4f 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff49 	bl	8002956 <LL_ADC_REG_IsConversionOngoing>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80a0 	bne.w	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 809c 	bne.w	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ae8:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002aea:	e000      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002aec:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002aee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d04b      	beq.n	8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b0a:	035b      	lsls	r3, r3, #13
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a45      	ldr	r2, [pc, #276]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10f      	bne.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b2c:	f7ff fed3 	bl	80028d6 <LL_ADC_IsEnabled>
 8002b30:	4604      	mov	r4, r0
 8002b32:	4841      	ldr	r0, [pc, #260]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b34:	f7ff fecf 	bl	80028d6 <LL_ADC_IsEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4323      	orrs	r3, r4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e012      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002b48:	483c      	ldr	r0, [pc, #240]	; (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b4a:	f7ff fec4 	bl	80028d6 <LL_ADC_IsEnabled>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	483b      	ldr	r0, [pc, #236]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b52:	f7ff fec0 	bl	80028d6 <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	431c      	orrs	r4, r3
 8002b5a:	483c      	ldr	r0, [pc, #240]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b5c:	f7ff febb 	bl	80028d6 <LL_ADC_IsEnabled>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4323      	orrs	r3, r4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d056      	beq.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b7a:	f023 030f 	bic.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b8e:	e047      	b.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002bb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bb4:	f7ff fe8f 	bl	80028d6 <LL_ADC_IsEnabled>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	481f      	ldr	r0, [pc, #124]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bbc:	f7ff fe8b 	bl	80028d6 <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4323      	orrs	r3, r4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e012      	b.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002bd0:	481a      	ldr	r0, [pc, #104]	; (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bd2:	f7ff fe80 	bl	80028d6 <LL_ADC_IsEnabled>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4819      	ldr	r0, [pc, #100]	; (8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bda:	f7ff fe7c 	bl	80028d6 <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	431c      	orrs	r4, r3
 8002be2:	481a      	ldr	r0, [pc, #104]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002be4:	f7ff fe77 	bl	80028d6 <LL_ADC_IsEnabled>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4323      	orrs	r3, r4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c02:	f023 030f 	bic.w	r3, r3, #15
 8002c06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c08:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c0a:	e009      	b.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c1e:	e000      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3784      	adds	r7, #132	; 0x84
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd90      	pop	{r4, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	50000100 	.word	0x50000100
 8002c3c:	50000400 	.word	0x50000400
 8002c40:	50000500 	.word	0x50000500
 8002c44:	50000300 	.word	0x50000300
 8002c48:	50000700 	.word	0x50000700
 8002c4c:	50000600 	.word	0x50000600

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	; (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dbc:	d301      	bcc.n	8002dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <SysTick_Config+0x40>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dca:	210f      	movs	r1, #15
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f7ff ff8e 	bl	8002cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <SysTick_Config+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <SysTick_Config+0x40>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff29 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff40 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff90 	bl	8002d44 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5f 	bl	8002cf0 <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff33 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffa4 	bl	8002dac <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08d      	b.n	8002f9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_DMA_Init+0x138>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d80f      	bhi.n	8002eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b45      	ldr	r3, [pc, #276]	; (8002fac <HAL_DMA_Init+0x13c>)
 8002e96:	4413      	add	r3, r2
 8002e98:	4a45      	ldr	r2, [pc, #276]	; (8002fb0 <HAL_DMA_Init+0x140>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	009a      	lsls	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_DMA_Init+0x144>)
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8002eac:	e00e      	b.n	8002ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_DMA_Init+0x148>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <HAL_DMA_Init+0x140>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a3c      	ldr	r2, [pc, #240]	; (8002fbc <HAL_DMA_Init+0x14c>)
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa76 	bl	8003410 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2c:	d102      	bne.n	8002f34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_DMA_Init+0x104>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d80c      	bhi.n	8002f74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa96 	bl	800348c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e008      	b.n	8002f86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40020407 	.word	0x40020407
 8002fac:	bffdfff8 	.word	0xbffdfff8
 8002fb0:	cccccccd 	.word	0xcccccccd
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	bffdfbf8 	.word	0xbffdfbf8
 8002fbc:	40020400 	.word	0x40020400

08002fc0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Start_IT+0x20>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e066      	b.n	80030ae <HAL_DMA_Start_IT+0xee>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d155      	bne.n	80030a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f9bb 	bl	8003394 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 020e 	orr.w	r2, r2, #14
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e00f      	b.n	8003058 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 020a 	orr.w	r2, r2, #10
 8003056:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003074:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e005      	b.n	80030ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
 80030aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d005      	beq.n	80030da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e037      	b.n	800314a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 020e 	bic.w	r2, r2, #14
 80030e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003126:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800313e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003148:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d00d      	beq.n	800319c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2204      	movs	r2, #4
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e047      	b.n	800322c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 020e 	bic.w	r2, r2, #14
 80031aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f003 021f 	and.w	r2, r3, #31
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00c      	beq.n	800320c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003200:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800320a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
    }
  }
  return status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2204      	movs	r2, #4
 8003258:	409a      	lsls	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d026      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x7a>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0204 	bic.w	r2, r2, #4
 8003288:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 021f 	and.w	r2, r3, #31
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2104      	movs	r1, #4
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d071      	beq.n	800338a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032ae:	e06c      	b.n	800338a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2202      	movs	r2, #2
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02e      	beq.n	8003322 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d029      	beq.n	8003322 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 020a 	bic.w	r2, r2, #10
 80032ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2102      	movs	r1, #2
 8003302:	fa01 f202 	lsl.w	r2, r1, r2
 8003306:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d038      	beq.n	800338a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003320:	e033      	b.n	800338a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2208      	movs	r2, #8
 800332c:	409a      	lsls	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d02a      	beq.n	800338c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d025      	beq.n	800338c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 020e 	bic.w	r2, r2, #14
 800334e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800338a:	bf00      	nop
 800338c:	bf00      	nop
}
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f003 021f 	and.w	r2, r3, #31
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d108      	bne.n	80033f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033f2:	e007      	b.n	8003404 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d802      	bhi.n	800342a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e001      	b.n	800342e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800342c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3b08      	subs	r3, #8
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800345a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2201      	movs	r2, #1
 8003464:	409a      	lsls	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	651a      	str	r2, [r3, #80]	; 0x50
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40020407 	.word	0x40020407
 800347c:	40020800 	.word	0x40020800
 8003480:	40020820 	.word	0x40020820
 8003484:	cccccccd 	.word	0xcccccccd
 8003488:	40020880 	.word	0x40020880

0800348c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2201      	movs	r2, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	1000823f 	.word	0x1000823f
 80034d0:	40020940 	.word	0x40020940

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034e2:	e15a      	b.n	800379a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2101      	movs	r1, #1
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 814c 	beq.w	8003794 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d005      	beq.n	8003514 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003510:	2b02      	cmp	r3, #2
 8003512:	d130      	bne.n	8003576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800354a:	2201      	movs	r2, #1
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 0201 	and.w	r2, r3, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b03      	cmp	r3, #3
 8003580:	d017      	beq.n	80035b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d123      	bne.n	8003606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	08da      	lsrs	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3208      	adds	r2, #8
 80035c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3208      	adds	r2, #8
 8003600:	6939      	ldr	r1, [r7, #16]
 8003602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	2203      	movs	r2, #3
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80a6 	beq.w	8003794 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003648:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_GPIO_Init+0x2e4>)
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	4a5a      	ldr	r2, [pc, #360]	; (80037b8 <HAL_GPIO_Init+0x2e4>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6613      	str	r3, [r2, #96]	; 0x60
 8003654:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <HAL_GPIO_Init+0x2e4>)
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003660:	4a56      	ldr	r2, [pc, #344]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800368a:	d01f      	beq.n	80036cc <HAL_GPIO_Init+0x1f8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a4c      	ldr	r2, [pc, #304]	; (80037c0 <HAL_GPIO_Init+0x2ec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d019      	beq.n	80036c8 <HAL_GPIO_Init+0x1f4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a4b      	ldr	r2, [pc, #300]	; (80037c4 <HAL_GPIO_Init+0x2f0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_GPIO_Init+0x1f0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a4a      	ldr	r2, [pc, #296]	; (80037c8 <HAL_GPIO_Init+0x2f4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00d      	beq.n	80036c0 <HAL_GPIO_Init+0x1ec>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a49      	ldr	r2, [pc, #292]	; (80037cc <HAL_GPIO_Init+0x2f8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d007      	beq.n	80036bc <HAL_GPIO_Init+0x1e8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a48      	ldr	r2, [pc, #288]	; (80037d0 <HAL_GPIO_Init+0x2fc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_GPIO_Init+0x1e4>
 80036b4:	2305      	movs	r3, #5
 80036b6:	e00a      	b.n	80036ce <HAL_GPIO_Init+0x1fa>
 80036b8:	2306      	movs	r3, #6
 80036ba:	e008      	b.n	80036ce <HAL_GPIO_Init+0x1fa>
 80036bc:	2304      	movs	r3, #4
 80036be:	e006      	b.n	80036ce <HAL_GPIO_Init+0x1fa>
 80036c0:	2303      	movs	r3, #3
 80036c2:	e004      	b.n	80036ce <HAL_GPIO_Init+0x1fa>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e002      	b.n	80036ce <HAL_GPIO_Init+0x1fa>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_GPIO_Init+0x1fa>
 80036cc:	2300      	movs	r3, #0
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	f002 0203 	and.w	r2, r2, #3
 80036d4:	0092      	lsls	r2, r2, #2
 80036d6:	4093      	lsls	r3, r2
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036de:	4937      	ldr	r1, [pc, #220]	; (80037bc <HAL_GPIO_Init+0x2e8>)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3302      	adds	r3, #2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ec:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_GPIO_Init+0x300>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003710:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800373a:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <HAL_GPIO_Init+0x300>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_GPIO_Init+0x300>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800378e:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <HAL_GPIO_Init+0x300>)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3301      	adds	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f ae9d 	bne.w	80034e4 <HAL_GPIO_Init+0x10>
  }
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40010000 	.word	0x40010000
 80037c0:	48000400 	.word	0x48000400
 80037c4:	48000800 	.word	0x48000800
 80037c8:	48000c00 	.word	0x48000c00
 80037cc:	48001000 	.word	0x48001000
 80037d0:	48001400 	.word	0x48001400
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037f4:	e002      	b.n	80037fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	041a      	lsls	r2, r3, #16
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43d9      	mvns	r1, r3
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	400b      	ands	r3, r1
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	619a      	str	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f806 	bl	800386c <HAL_GPIO_EXTI_Callback>
  }
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d141      	bne.n	8003916 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003892:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389e:	d131      	bne.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a0:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a6:	4a46      	ldr	r2, [pc, #280]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b0:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b8:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038c0:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2232      	movs	r2, #50	; 0x32
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	0c9b      	lsrs	r3, r3, #18
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d6:	e002      	b.n	80038de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3b01      	subs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038de:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d102      	bne.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f2      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f2:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d158      	bne.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e057      	b.n	80039b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003904:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390a:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003914:	e04d      	b.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d141      	bne.n	80039a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d131      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800392c:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003932:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800393c:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2232      	movs	r2, #50	; 0x32
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	0c9b      	lsrs	r3, r3, #18
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003962:	e002      	b.n	800396a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3b01      	subs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d102      	bne.n	800397e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f2      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398a:	d112      	bne.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e011      	b.n	80039b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039a0:	e007      	b.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40007000 	.word	0x40007000
 80039c4:	20000004 	.word	0x20000004
 80039c8:	431bde83 	.word	0x431bde83

080039cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039da:	6093      	str	r3, [r2, #8]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e2fe      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0a:	4b97      	ldr	r3, [pc, #604]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a14:	4b94      	ldr	r3, [pc, #592]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b0c      	cmp	r3, #12
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3e>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d002      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b8d      	ldr	r3, [pc, #564]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e2d9      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b85      	ldr	r3, [pc, #532]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a84      	ldr	r2, [pc, #528]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7e      	ldr	r2, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7b      	ldr	r2, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b78      	ldr	r3, [pc, #480]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a77      	ldr	r2, [pc, #476]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a74      	ldr	r2, [pc, #464]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fc50 	bl	8001348 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fd fc4c 	bl	8001348 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e29e      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003abe:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd fc3c 	bl	8001348 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fd fc38 	bl	8001348 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e28a      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae6:	4b60      	ldr	r3, [pc, #384]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d075      	beq.n	8003bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b02:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b0c:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_OscConfig+0x136>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_OscConfig+0x13c>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d11f      	bne.n	8003b68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b28:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x154>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e25d      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	4946      	ldr	r1, [pc, #280]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b54:	4b45      	ldr	r3, [pc, #276]	; (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd fba9 	bl	80012b0 <HAL_InitTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d043      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e249      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d023      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fbe4 	bl	8001348 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b84:	f7fd fbe0 	bl	8001348 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e232      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	492d      	ldr	r1, [pc, #180]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
 8003bb6:	e01a      	b.n	8003bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fbc0 	bl	8001348 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fbbc 	bl	8001348 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e20e      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x1e0>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d041      	beq.n	8003c7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c08:	4a17      	ldr	r2, [pc, #92]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fd fb99 	bl	8001348 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fd fb95 	bl	8001348 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1e7      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0ef      	beq.n	8003c1a <HAL_RCC_OscConfig+0x22e>
 8003c3a:	e020      	b.n	8003c7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd fb7c 	bl	8001348 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c52:	e00d      	b.n	8003c70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c54:	f7fd fb78 	bl	8001348 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d906      	bls.n	8003c70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1ca      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c70:	4b8c      	ldr	r3, [pc, #560]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1ea      	bne.n	8003c54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a6 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c90:	4b84      	ldr	r3, [pc, #528]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2b4>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2b6>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b7f      	ldr	r3, [pc, #508]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	4a7e      	ldr	r2, [pc, #504]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb2:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc2:	4b79      	ldr	r3, [pc, #484]	; (8003ea8 <HAL_RCC_OscConfig+0x4bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x4bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a75      	ldr	r2, [pc, #468]	; (8003ea8 <HAL_RCC_OscConfig+0x4bc>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fd fb35 	bl	8001348 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fd fb31 	bl	8001348 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e183      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf4:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_OscConfig+0x4bc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d108      	bne.n	8003d1a <HAL_RCC_OscConfig+0x32e>
 8003d08:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d18:	e024      	b.n	8003d64 <HAL_RCC_OscConfig+0x378>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d110      	bne.n	8003d44 <HAL_RCC_OscConfig+0x358>
 8003d22:	4b60      	ldr	r3, [pc, #384]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d32:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	4a5a      	ldr	r2, [pc, #360]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d42:	e00f      	b.n	8003d64 <HAL_RCC_OscConfig+0x378>
 8003d44:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	4a56      	ldr	r2, [pc, #344]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d5c:	f023 0304 	bic.w	r3, r3, #4
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d016      	beq.n	8003d9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd faec 	bl	8001348 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fd fae8 	bl	8001348 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e138      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8a:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ed      	beq.n	8003d74 <HAL_RCC_OscConfig+0x388>
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fad5 	bl	8001348 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd fad1 	bl	8001348 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e121      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db8:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ed      	bne.n	8003da2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc6:	7ffb      	ldrb	r3, [r7, #31]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d03c      	beq.n	8003e5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dec:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df2:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fd faa4 	bl	8001348 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e04:	f7fd faa0 	bl	8001348 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0f2      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e16:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <HAL_RCC_OscConfig+0x418>
 8003e24:	e01b      	b.n	8003e5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fd fa87 	bl	8001348 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e3e:	f7fd fa83 	bl	8001348 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0d5      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ef      	bne.n	8003e3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80c9 	beq.w	8003ffa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	f000 8083 	beq.w	8003f7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d15e      	bne.n	8003f3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_RCC_OscConfig+0x4b8>)
 8003e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fa5d 	bl	8001348 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e90:	e00c      	b.n	8003eac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fd fa59 	bl	8001348 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d905      	bls.n	8003eac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0ab      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ec      	bne.n	8003e92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb8:	4b52      	ldr	r3, [pc, #328]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	4b52      	ldr	r3, [pc, #328]	; (8004008 <HAL_RCC_OscConfig+0x61c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6a11      	ldr	r1, [r2, #32]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ed2:	0212      	lsls	r2, r2, #8
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0552      	lsls	r2, r2, #21
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ee6:	0852      	lsrs	r2, r2, #1
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0652      	lsls	r2, r2, #25
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ef2:	06d2      	lsls	r2, r2, #27
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	4943      	ldr	r1, [pc, #268]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a40      	ldr	r2, [pc, #256]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f08:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a3d      	ldr	r2, [pc, #244]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fa18 	bl	8001348 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fa14 	bl	8001348 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e066      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2e:	4b35      	ldr	r3, [pc, #212]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x530>
 8003f3a:	e05e      	b.n	8003ffa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a30      	ldr	r2, [pc, #192]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd f9fe 	bl	8001348 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd f9fa 	bl	8001348 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04c      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	4924      	ldr	r1, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_OscConfig+0x620>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	60cb      	str	r3, [r1, #12]
 8003f7a:	e03e      	b.n	8003ffa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e039      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0203 	and.w	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d12c      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d123      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d113      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	019f800c 	.word	0x019f800c
 800400c:	feeefffc 	.word	0xfeeefffc

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e11e      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b91      	ldr	r3, [pc, #580]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d910      	bls.n	8004058 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b8e      	ldr	r3, [pc, #568]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 020f 	bic.w	r2, r3, #15
 800403e:	498c      	ldr	r1, [pc, #560]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e106      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d073      	beq.n	800414c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d129      	bne.n	80040c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406c:	4b81      	ldr	r3, [pc, #516]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0f4      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800407c:	f000 f99e 	bl	80043bc <RCC_GetSysClockFreqFromPLLSource>
 8004080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_RCC_ClockConfig+0x268>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d93f      	bls.n	800410a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800408a:	4b7a      	ldr	r3, [pc, #488]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d033      	beq.n	800410a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d12f      	bne.n	800410a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040aa:	4b72      	ldr	r3, [pc, #456]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b2:	4a70      	ldr	r2, [pc, #448]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e024      	b.n	800410a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c8:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0c6      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040d8:	4b66      	ldr	r3, [pc, #408]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0be      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040e8:	f000 f8ce 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4a61      	ldr	r2, [pc, #388]	; (8004278 <HAL_RCC_ClockConfig+0x268>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d909      	bls.n	800410a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040f6:	4b5f      	ldr	r3, [pc, #380]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040fe:	4a5d      	ldr	r2, [pc, #372]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004104:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b5a      	ldr	r3, [pc, #360]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4957      	ldr	r1, [pc, #348]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411c:	f7fd f914 	bl	8001348 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fd f910 	bl	8001348 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e095      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b4e      	ldr	r3, [pc, #312]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a42      	ldr	r2, [pc, #264]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800416a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800416e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800417c:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004184:	4a3b      	ldr	r2, [pc, #236]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800418a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800418c:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4936      	ldr	r1, [pc, #216]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
 800419e:	e008      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d105      	bne.n	80041b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a32      	ldr	r2, [pc, #200]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 80041ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b2:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d21d      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 020f 	bic.w	r2, r3, #15
 80041c8:	4929      	ldr	r1, [pc, #164]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041d0:	f7fd f8ba 	bl	8001348 <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fd f8b6 	bl	8001348 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e03b      	b.n	8004266 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1ed      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4917      	ldr	r1, [pc, #92]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	490f      	ldr	r1, [pc, #60]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800423a:	f000 f825 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 800423e:	4602      	mov	r2, r0
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCC_ClockConfig+0x264>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490c      	ldr	r1, [pc, #48]	; (800427c <HAL_RCC_ClockConfig+0x26c>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x270>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd f826 	bl	80012b0 <HAL_InitTick>
 8004264:	4603      	mov	r3, r0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40022000 	.word	0x40022000
 8004274:	40021000 	.word	0x40021000
 8004278:	04c4b400 	.word	0x04c4b400
 800427c:	08007c88 	.word	0x08007c88
 8004280:	20000004 	.word	0x20000004
 8004284:	20000008 	.word	0x20000008

08004288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d102      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800429a:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <HAL_RCC_GetSysClockFreq+0xbc>)
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e047      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d102      	bne.n	80042b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042ac:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e03e      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d136      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	3301      	adds	r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d10c      	bne.n	80042f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042dc:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	4a16      	ldr	r2, [pc, #88]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042e6:	68d2      	ldr	r2, [r2, #12]
 80042e8:	0a12      	lsrs	r2, r2, #8
 80042ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	617b      	str	r3, [r7, #20]
      break;
 80042f4:	e00c      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004300:	68d2      	ldr	r2, [r2, #12]
 8004302:	0a12      	lsrs	r2, r2, #8
 8004304:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
      break;
 800430e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	0e5b      	lsrs	r3, r3, #25
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	3301      	adds	r3, #1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e001      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004330:	693b      	ldr	r3, [r7, #16]
}
 8004332:	4618      	mov	r0, r3
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	00f42400 	.word	0x00f42400
 8004348:	016e3600 	.word	0x016e3600

0800434c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_RCC_GetHCLKFreq+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004368:	f7ff fff0 	bl	800434c <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4904      	ldr	r1, [pc, #16]	; (800438c <HAL_RCC_GetPCLK1Freq+0x28>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	08007c98 	.word	0x08007c98

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004394:	f7ff ffda 	bl	800434c <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0adb      	lsrs	r3, r3, #11
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	08007c98 	.word	0x08007c98

080043bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3301      	adds	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d10c      	bne.n	80043fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ea:	68d2      	ldr	r2, [r2, #12]
 80043ec:	0a12      	lsrs	r2, r2, #8
 80043ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
    break;
 80043f8:	e00c      	b.n	8004414 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	4a0e      	ldr	r2, [pc, #56]	; (800443c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	0a12      	lsrs	r2, r2, #8
 8004408:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
    break;
 8004412:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0e5b      	lsrs	r3, r3, #25
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	3301      	adds	r3, #1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800442e:	687b      	ldr	r3, [r7, #4]
}
 8004430:	4618      	mov	r0, r3
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40021000 	.word	0x40021000
 8004440:	016e3600 	.word	0x016e3600
 8004444:	00f42400 	.word	0x00f42400

08004448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004450:	2300      	movs	r3, #0
 8004452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004454:	2300      	movs	r3, #0
 8004456:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8098 	beq.w	8004596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446a:	4b43      	ldr	r3, [pc, #268]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b40      	ldr	r3, [pc, #256]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	4a3f      	ldr	r2, [pc, #252]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6593      	str	r3, [r2, #88]	; 0x58
 8004482:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004492:	4b3a      	ldr	r3, [pc, #232]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a39      	ldr	r2, [pc, #228]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449e:	f7fc ff53 	bl	8001348 <HAL_GetTick>
 80044a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a4:	e009      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fc ff4f 	bl	8001348 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d902      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	74fb      	strb	r3, [r7, #19]
        break;
 80044b8:	e005      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ba:	4b30      	ldr	r3, [pc, #192]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ef      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d159      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044cc:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01e      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d019      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e8:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004504:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004514:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fc ff0f 	bl	8001348 <HAL_GetTick>
 800452a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452c:	e00b      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fc ff0b 	bl	8001348 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d902      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	74fb      	strb	r3, [r7, #19]
            break;
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ec      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004570:	e008      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	74bb      	strb	r3, [r7, #18]
 8004576:	e005      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004584:	7c7b      	ldrb	r3, [r7, #17]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4ba7      	ldr	r3, [pc, #668]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	4aa6      	ldr	r2, [pc, #664]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a2:	4ba1      	ldr	r3, [pc, #644]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f023 0203 	bic.w	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	499d      	ldr	r1, [pc, #628]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c4:	4b98      	ldr	r3, [pc, #608]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 020c 	bic.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4995      	ldr	r1, [pc, #596]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e6:	4b90      	ldr	r3, [pc, #576]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	498c      	ldr	r1, [pc, #560]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004608:	4b87      	ldr	r3, [pc, #540]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4984      	ldr	r1, [pc, #528]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462a:	4b7f      	ldr	r3, [pc, #508]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	497b      	ldr	r1, [pc, #492]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800464c:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	4973      	ldr	r1, [pc, #460]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800466e:	4b6e      	ldr	r3, [pc, #440]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	496a      	ldr	r1, [pc, #424]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004690:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	4962      	ldr	r1, [pc, #392]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b2:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	4959      	ldr	r1, [pc, #356]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d4:	4b54      	ldr	r3, [pc, #336]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046da:	f023 0203 	bic.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	4951      	ldr	r1, [pc, #324]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f6:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	4948      	ldr	r1, [pc, #288]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004718:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4940      	ldr	r1, [pc, #256]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a3a      	ldr	r2, [pc, #232]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004750:	4b35      	ldr	r3, [pc, #212]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	4932      	ldr	r1, [pc, #200]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	4924      	ldr	r1, [pc, #144]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	4916      	ldr	r1, [pc, #88]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a10      	ldr	r2, [pc, #64]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d019      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4908      	ldr	r1, [pc, #32]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004816:	d109      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a02      	ldr	r2, [pc, #8]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004822:	60d3      	str	r3, [r2, #12]
 8004824:	e002      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d015      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004838:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	4926      	ldr	r1, [pc, #152]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004856:	d105      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004862:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	4918      	ldr	r1, [pc, #96]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488e:	d105      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	490a      	ldr	r1, [pc, #40]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c6:	d105      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000

080048e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e049      	b.n	800498a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fb92 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 fe34 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e04c      	b.n	8004a46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <HAL_TIM_Base_Start+0xc0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d022      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d01d      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <HAL_TIM_Base_Start+0xc4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a21      	ldr	r2, [pc, #132]	; (8004a5c <HAL_TIM_Base_Start+0xc8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <HAL_TIM_Base_Start+0xcc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <HAL_TIM_Base_Start+0xd0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_TIM_Base_Start+0xd4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_TIM_Base_Start+0xd8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d115      	bne.n	8004a30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_TIM_Base_Start+0xdc>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d015      	beq.n	8004a42 <HAL_TIM_Base_Start+0xae>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d011      	beq.n	8004a42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e008      	b.n	8004a42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e000      	b.n	8004a44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40015000 	.word	0x40015000
 8004a70:	00010007 	.word	0x00010007

08004a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e054      	b.n	8004b36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d022      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d01d      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a22      	ldr	r2, [pc, #136]	; (8004b48 <HAL_TIM_Base_Start_IT+0xd4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_TIM_Base_Start_IT+0xe0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x80>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_TIM_Base_Start_IT+0xe8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d115      	bne.n	8004b20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <HAL_TIM_Base_Start_IT+0xec>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d015      	beq.n	8004b32 <HAL_TIM_Base_Start_IT+0xbe>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d011      	beq.n	8004b32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	e008      	b.n	8004b32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e000      	b.n	8004b34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40015000 	.word	0x40015000
 8004b60:	00010007 	.word	0x00010007

08004b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e049      	b.n	8004c0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f841 	bl	8004c12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f000 fcf4 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <HAL_TIM_PWM_Start+0x24>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e03c      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x9e>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d109      	bne.n	8004c66 <HAL_TIM_PWM_Start+0x3e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	bf14      	ite	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	2300      	moveq	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	e02f      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x9e>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d109      	bne.n	8004c80 <HAL_TIM_PWM_Start+0x58>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e022      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x9e>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d109      	bne.n	8004c9a <HAL_TIM_PWM_Start+0x72>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	e015      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x9e>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d109      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x8c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e008      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x9e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0a6      	b.n	8004e1c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xb6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	e023      	b.n	8004d26 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start+0xc6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	e01b      	b.n	8004d26 <HAL_TIM_PWM_Start+0xfe>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0xd6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_PWM_Start+0xfe>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0xe6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_PWM_Start+0xfe>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0xf6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_PWM_Start+0xfe>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f8a8 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3a      	ldr	r2, [pc, #232]	; (8004e24 <HAL_TIM_PWM_Start+0x1fc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x148>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a39      	ldr	r2, [pc, #228]	; (8004e28 <HAL_TIM_PWM_Start+0x200>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x148>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a37      	ldr	r2, [pc, #220]	; (8004e2c <HAL_TIM_PWM_Start+0x204>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x148>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a36      	ldr	r2, [pc, #216]	; (8004e30 <HAL_TIM_PWM_Start+0x208>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x148>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a34      	ldr	r2, [pc, #208]	; (8004e34 <HAL_TIM_PWM_Start+0x20c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x148>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a33      	ldr	r2, [pc, #204]	; (8004e38 <HAL_TIM_PWM_Start+0x210>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIM_PWM_Start+0x14c>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <HAL_TIM_PWM_Start+0x14e>
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a25      	ldr	r2, [pc, #148]	; (8004e24 <HAL_TIM_PWM_Start+0x1fc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d01d      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <HAL_TIM_PWM_Start+0x214>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d018      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <HAL_TIM_PWM_Start+0x218>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_TIM_PWM_Start+0x21c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00e      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_TIM_PWM_Start+0x200>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d009      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_TIM_PWM_Start+0x204>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_TIM_PWM_Start+0x1b2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_TIM_PWM_Start+0x210>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d115      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_TIM_PWM_Start+0x220>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b06      	cmp	r3, #6
 8004dea:	d015      	beq.n	8004e18 <HAL_TIM_PWM_Start+0x1f0>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df2:	d011      	beq.n	8004e18 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e04:	e008      	b.n	8004e18 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e000      	b.n	8004e1a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40015000 	.word	0x40015000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	00010007 	.word	0x00010007

08004e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0202 	mvn.w	r2, #2
 8004e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fb5c 	bl	8005554 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fb4e 	bl	8005540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb5f 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0204 	mvn.w	r2, #4
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fb36 	bl	8005554 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb28 	bl	8005540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb39 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01b      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0208 	mvn.w	r2, #8
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fb10 	bl	8005554 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb02 	bl	8005540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fb13 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d020      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01b      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 faea 	bl	8005554 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fadc 	bl	8005540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 faed 	bl	8005568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0201 	mvn.w	r2, #1
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fb fe86 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 f8a9 	bl	8006138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00c      	beq.n	800500a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 f8a1 	bl	800614c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 faa7 	bl	800557c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00c      	beq.n	8005052 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0220 	mvn.w	r2, #32
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 f869 	bl	8006124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00c      	beq.n	8005076 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 f875 	bl	8006160 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00c      	beq.n	800509a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 f86d 	bl	8006174 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 f865 	bl	8006188 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 f85d 	bl	800619c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005106:	2302      	movs	r3, #2
 8005108:	e0ff      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b14      	cmp	r3, #20
 8005116:	f200 80f0 	bhi.w	80052fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005175 	.word	0x08005175
 8005124:	080052fb 	.word	0x080052fb
 8005128:	080052fb 	.word	0x080052fb
 800512c:	080052fb 	.word	0x080052fb
 8005130:	080051b5 	.word	0x080051b5
 8005134:	080052fb 	.word	0x080052fb
 8005138:	080052fb 	.word	0x080052fb
 800513c:	080052fb 	.word	0x080052fb
 8005140:	080051f7 	.word	0x080051f7
 8005144:	080052fb 	.word	0x080052fb
 8005148:	080052fb 	.word	0x080052fb
 800514c:	080052fb 	.word	0x080052fb
 8005150:	08005237 	.word	0x08005237
 8005154:	080052fb 	.word	0x080052fb
 8005158:	080052fb 	.word	0x080052fb
 800515c:	080052fb 	.word	0x080052fb
 8005160:	08005279 	.word	0x08005279
 8005164:	080052fb 	.word	0x080052fb
 8005168:	080052fb 	.word	0x080052fb
 800516c:	080052fb 	.word	0x080052fb
 8005170:	080052b9 	.word	0x080052b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fabc 	bl	80056f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	619a      	str	r2, [r3, #24]
      break;
 80051b2:	e0a5      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fb36 	bl	800582c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	619a      	str	r2, [r3, #24]
      break;
 80051f4:	e084      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fba9 	bl	8005954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0208 	orr.w	r2, r2, #8
 8005210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0204 	bic.w	r2, r2, #4
 8005220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	61da      	str	r2, [r3, #28]
      break;
 8005234:	e064      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fc1b 	bl	8005a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	021a      	lsls	r2, r3, #8
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	61da      	str	r2, [r3, #28]
      break;
 8005276:	e043      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fc8e 	bl	8005ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80052b6:	e023      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fcd8 	bl	8005c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80052f8:	e002      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop

08005314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIM_ConfigClockSource+0x1c>
 800532c:	2302      	movs	r3, #2
 800532e:	e0f6      	b.n	800551e <HAL_TIM_ConfigClockSource+0x20a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800534e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6f      	ldr	r2, [pc, #444]	; (8005528 <HAL_TIM_ConfigClockSource+0x214>)
 800536a:	4293      	cmp	r3, r2
 800536c:	f000 80c1 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005370:	4a6d      	ldr	r2, [pc, #436]	; (8005528 <HAL_TIM_ConfigClockSource+0x214>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f200 80c6 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005378:	4a6c      	ldr	r2, [pc, #432]	; (800552c <HAL_TIM_ConfigClockSource+0x218>)
 800537a:	4293      	cmp	r3, r2
 800537c:	f000 80b9 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005380:	4a6a      	ldr	r2, [pc, #424]	; (800552c <HAL_TIM_ConfigClockSource+0x218>)
 8005382:	4293      	cmp	r3, r2
 8005384:	f200 80be 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005388:	4a69      	ldr	r2, [pc, #420]	; (8005530 <HAL_TIM_ConfigClockSource+0x21c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	f000 80b1 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005390:	4a67      	ldr	r2, [pc, #412]	; (8005530 <HAL_TIM_ConfigClockSource+0x21c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	f200 80b6 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005398:	4a66      	ldr	r2, [pc, #408]	; (8005534 <HAL_TIM_ConfigClockSource+0x220>)
 800539a:	4293      	cmp	r3, r2
 800539c:	f000 80a9 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 80053a0:	4a64      	ldr	r2, [pc, #400]	; (8005534 <HAL_TIM_ConfigClockSource+0x220>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	f200 80ae 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 80053a8:	4a63      	ldr	r2, [pc, #396]	; (8005538 <HAL_TIM_ConfigClockSource+0x224>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	f000 80a1 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 80053b0:	4a61      	ldr	r2, [pc, #388]	; (8005538 <HAL_TIM_ConfigClockSource+0x224>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	f200 80a6 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 80053b8:	4a60      	ldr	r2, [pc, #384]	; (800553c <HAL_TIM_ConfigClockSource+0x228>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	f000 8099 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 80053c0:	4a5e      	ldr	r2, [pc, #376]	; (800553c <HAL_TIM_ConfigClockSource+0x228>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	f200 809e 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 80053c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053cc:	f000 8091 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 80053d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053d4:	f200 8096 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 80053d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053dc:	f000 8089 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 80053e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e4:	f200 808e 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 80053e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ec:	d03e      	beq.n	800546c <HAL_TIM_ConfigClockSource+0x158>
 80053ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f2:	f200 8087 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	f000 8086 	beq.w	800550a <HAL_TIM_ConfigClockSource+0x1f6>
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005402:	d87f      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005404:	2b70      	cmp	r3, #112	; 0x70
 8005406:	d01a      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x12a>
 8005408:	2b70      	cmp	r3, #112	; 0x70
 800540a:	d87b      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d050      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x19e>
 8005410:	2b60      	cmp	r3, #96	; 0x60
 8005412:	d877      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d03c      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x17e>
 8005418:	2b50      	cmp	r3, #80	; 0x50
 800541a:	d873      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d058      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x1be>
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	d86f      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d064      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005428:	2b30      	cmp	r3, #48	; 0x30
 800542a:	d86b      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d060      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005430:	2b20      	cmp	r3, #32
 8005432:	d867      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d05c      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005438:	2b10      	cmp	r3, #16
 800543a:	d05a      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1de>
 800543c:	e062      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800544e:	f000 fcf9 	bl	8005e44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	609a      	str	r2, [r3, #8]
      break;
 800546a:	e04f      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800547c:	f000 fce2 	bl	8005e44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800548e:	609a      	str	r2, [r3, #8]
      break;
 8005490:	e03c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 fc54 	bl	8005d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2150      	movs	r1, #80	; 0x50
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fcad 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 80054b0:	e02c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054be:	461a      	mov	r2, r3
 80054c0:	f000 fc73 	bl	8005daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2160      	movs	r1, #96	; 0x60
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fc9d 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 80054d0:	e01c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fc34 	bl	8005d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fc8d 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 80054f0:	e00c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f000 fc84 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005502:	e003      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	e000      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800550a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	00100070 	.word	0x00100070
 800552c:	00100060 	.word	0x00100060
 8005530:	00100050 	.word	0x00100050
 8005534:	00100040 	.word	0x00100040
 8005538:	00100030 	.word	0x00100030
 800553c:	00100020 	.word	0x00100020

08005540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a4c      	ldr	r2, [pc, #304]	; (80056d4 <TIM_Base_SetConfig+0x144>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d017      	beq.n	80055d8 <TIM_Base_SetConfig+0x48>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d013      	beq.n	80055d8 <TIM_Base_SetConfig+0x48>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a49      	ldr	r2, [pc, #292]	; (80056d8 <TIM_Base_SetConfig+0x148>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00f      	beq.n	80055d8 <TIM_Base_SetConfig+0x48>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a48      	ldr	r2, [pc, #288]	; (80056dc <TIM_Base_SetConfig+0x14c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00b      	beq.n	80055d8 <TIM_Base_SetConfig+0x48>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a47      	ldr	r2, [pc, #284]	; (80056e0 <TIM_Base_SetConfig+0x150>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_Base_SetConfig+0x48>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a46      	ldr	r2, [pc, #280]	; (80056e4 <TIM_Base_SetConfig+0x154>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0x48>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a45      	ldr	r2, [pc, #276]	; (80056e8 <TIM_Base_SetConfig+0x158>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a39      	ldr	r2, [pc, #228]	; (80056d4 <TIM_Base_SetConfig+0x144>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d023      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d01f      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a36      	ldr	r2, [pc, #216]	; (80056d8 <TIM_Base_SetConfig+0x148>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01b      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a35      	ldr	r2, [pc, #212]	; (80056dc <TIM_Base_SetConfig+0x14c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d017      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <TIM_Base_SetConfig+0x150>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a33      	ldr	r2, [pc, #204]	; (80056e4 <TIM_Base_SetConfig+0x154>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a33      	ldr	r2, [pc, #204]	; (80056ec <TIM_Base_SetConfig+0x15c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a32      	ldr	r2, [pc, #200]	; (80056f0 <TIM_Base_SetConfig+0x160>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <TIM_Base_SetConfig+0x164>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_Base_SetConfig+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <TIM_Base_SetConfig+0x158>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <TIM_Base_SetConfig+0x144>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <TIM_Base_SetConfig+0x110>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <TIM_Base_SetConfig+0x154>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00f      	beq.n	80056a0 <TIM_Base_SetConfig+0x110>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1a      	ldr	r2, [pc, #104]	; (80056ec <TIM_Base_SetConfig+0x15c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_Base_SetConfig+0x110>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <TIM_Base_SetConfig+0x160>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_Base_SetConfig+0x110>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <TIM_Base_SetConfig+0x164>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0x110>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <TIM_Base_SetConfig+0x158>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d103      	bne.n	80056a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f023 0201 	bic.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	611a      	str	r2, [r3, #16]
  }
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40015000 	.word	0x40015000
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800

080056f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f023 0201 	bic.w	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f023 0302 	bic.w	r3, r3, #2
 8005744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a30      	ldr	r2, [pc, #192]	; (8005814 <TIM_OC1_SetConfig+0x11c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <TIM_OC1_SetConfig+0x88>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <TIM_OC1_SetConfig+0x120>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_OC1_SetConfig+0x88>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a2e      	ldr	r2, [pc, #184]	; (800581c <TIM_OC1_SetConfig+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_OC1_SetConfig+0x88>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <TIM_OC1_SetConfig+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_OC1_SetConfig+0x88>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a2c      	ldr	r2, [pc, #176]	; (8005824 <TIM_OC1_SetConfig+0x12c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC1_SetConfig+0x88>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a2b      	ldr	r2, [pc, #172]	; (8005828 <TIM_OC1_SetConfig+0x130>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10c      	bne.n	800579a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0308 	bic.w	r3, r3, #8
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <TIM_OC1_SetConfig+0x11c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_OC1_SetConfig+0xd2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <TIM_OC1_SetConfig+0x120>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_OC1_SetConfig+0xd2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <TIM_OC1_SetConfig+0x124>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_OC1_SetConfig+0xd2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <TIM_OC1_SetConfig+0x128>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_OC1_SetConfig+0xd2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <TIM_OC1_SetConfig+0x12c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC1_SetConfig+0xd2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <TIM_OC1_SetConfig+0x130>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d111      	bne.n	80057ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800
 8005828:	40015000 	.word	0x40015000

0800582c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 0210 	bic.w	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0320 	bic.w	r3, r3, #32
 800587a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <TIM_OC2_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_OC2_SetConfig+0x74>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2b      	ldr	r2, [pc, #172]	; (8005940 <TIM_OC2_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC2_SetConfig+0x74>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <TIM_OC2_SetConfig+0x118>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10d      	bne.n	80058bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1f      	ldr	r2, [pc, #124]	; (800593c <TIM_OC2_SetConfig+0x110>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_OC2_SetConfig+0xc0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <TIM_OC2_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_OC2_SetConfig+0xc0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <TIM_OC2_SetConfig+0x11c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_OC2_SetConfig+0xc0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <TIM_OC2_SetConfig+0x120>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_OC2_SetConfig+0xc0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <TIM_OC2_SetConfig+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC2_SetConfig+0xc0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a17      	ldr	r2, [pc, #92]	; (8005944 <TIM_OC2_SetConfig+0x118>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d113      	bne.n	8005914 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40015000 	.word	0x40015000
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800

08005954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <TIM_OC3_SetConfig+0x10c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_OC3_SetConfig+0x72>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <TIM_OC3_SetConfig+0x110>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_OC3_SetConfig+0x72>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <TIM_OC3_SetConfig+0x114>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d10d      	bne.n	80059e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <TIM_OC3_SetConfig+0x10c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <TIM_OC3_SetConfig+0xbe>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <TIM_OC3_SetConfig+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00f      	beq.n	8005a12 <TIM_OC3_SetConfig+0xbe>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <TIM_OC3_SetConfig+0x118>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_OC3_SetConfig+0xbe>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <TIM_OC3_SetConfig+0x11c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_OC3_SetConfig+0xbe>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <TIM_OC3_SetConfig+0x120>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC3_SetConfig+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC3_SetConfig+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d113      	bne.n	8005a3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40013400 	.word	0x40013400
 8005a68:	40015000 	.word	0x40015000
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800

08005a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <TIM_OC4_SetConfig+0x110>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_OC4_SetConfig+0x74>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <TIM_OC4_SetConfig+0x114>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC4_SetConfig+0x74>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <TIM_OC4_SetConfig+0x118>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10d      	bne.n	8005b08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	031b      	lsls	r3, r3, #12
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <TIM_OC4_SetConfig+0x110>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <TIM_OC4_SetConfig+0xc0>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1e      	ldr	r2, [pc, #120]	; (8005b8c <TIM_OC4_SetConfig+0x114>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <TIM_OC4_SetConfig+0xc0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <TIM_OC4_SetConfig+0x11c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_OC4_SetConfig+0xc0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <TIM_OC4_SetConfig+0x120>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_OC4_SetConfig+0xc0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <TIM_OC4_SetConfig+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_OC4_SetConfig+0xc0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <TIM_OC4_SetConfig+0x118>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d113      	bne.n	8005b60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40015000 	.word	0x40015000
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005be4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <TIM_OC5_SetConfig+0xbc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <TIM_OC5_SetConfig+0x82>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <TIM_OC5_SetConfig+0xc0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00f      	beq.n	8005c22 <TIM_OC5_SetConfig+0x82>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <TIM_OC5_SetConfig+0xc4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00b      	beq.n	8005c22 <TIM_OC5_SetConfig+0x82>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <TIM_OC5_SetConfig+0xc8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <TIM_OC5_SetConfig+0x82>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <TIM_OC5_SetConfig+0xcc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_OC5_SetConfig+0x82>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <TIM_OC5_SetConfig+0xd0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d109      	bne.n	8005c36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40015000 	.word	0x40015000

08005c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	051b      	lsls	r3, r3, #20
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <TIM_OC6_SetConfig+0xc0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x84>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <TIM_OC6_SetConfig+0xc4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x84>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <TIM_OC6_SetConfig+0xc8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x84>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <TIM_OC6_SetConfig+0xcc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x84>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a16      	ldr	r2, [pc, #88]	; (8005d44 <TIM_OC6_SetConfig+0xd0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x84>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <TIM_OC6_SetConfig+0xd4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d109      	bne.n	8005d0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40013400 	.word	0x40013400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800
 8005d48:	40015000 	.word	0x40015000

08005d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 030a 	bic.w	r3, r3, #10
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0210 	bic.w	r2, r3, #16
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f043 0307 	orr.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2201      	movs	r2, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e074      	b.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a33      	ldr	r2, [pc, #204]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a31      	ldr	r2, [pc, #196]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d108      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a21      	ldr	r2, [pc, #132]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d022      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f68:	d01d      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d018      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40015000 	.word	0x40015000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40014000 	.word	0x40014000

08005ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006014:	2302      	movs	r3, #2
 8006016:	e078      	b.n	800610a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	041b      	lsls	r3, r3, #16
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d11c      	bne.n	80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c8:	051b      	lsls	r3, r3, #20
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40015000 	.word	0x40015000

08006124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e042      	b.n	8006248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fa fe71 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2224      	movs	r2, #36	; 0x24
 80061de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 ff52 	bl	80070a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fc53 	bl	8006aac <UART_SetConfig>
 8006206:	4603      	mov	r3, r0
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e01b      	b.n	8006248 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800621e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800622e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 ffd1 	bl	80071e8 <UART_CheckIdleState>
 8006246:	4603      	mov	r3, r0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	2b20      	cmp	r3, #32
 8006266:	d167      	bne.n	8006338 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_UART_Transmit_DMA+0x24>
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e060      	b.n	800633a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2221      	movs	r2, #33	; 0x21
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d028      	beq.n	80062f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062aa:	4a26      	ldr	r2, [pc, #152]	; (8006344 <HAL_UART_Transmit_DMA+0xf4>)
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b2:	4a25      	ldr	r2, [pc, #148]	; (8006348 <HAL_UART_Transmit_DMA+0xf8>)
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ba:	4a24      	ldr	r2, [pc, #144]	; (800634c <HAL_UART_Transmit_DMA+0xfc>)
 80062bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c2:	2200      	movs	r2, #0
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ce:	4619      	mov	r1, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3328      	adds	r3, #40	; 0x28
 80062d6:	461a      	mov	r2, r3
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	f7fc fe71 	bl	8002fc0 <HAL_DMA_Start_IT>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2210      	movs	r2, #16
 80062e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e020      	b.n	800633a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	613b      	str	r3, [r7, #16]
   return(result);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3308      	adds	r3, #8
 800631e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006320:	623a      	str	r2, [r7, #32]
 8006322:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	61bb      	str	r3, [r7, #24]
   return(result);
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e5      	bne.n	8006300 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3728      	adds	r7, #40	; 0x28
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	080076b3 	.word	0x080076b3
 8006348:	0800774d 	.word	0x0800774d
 800634c:	080078d3 	.word	0x080078d3

08006350 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006364:	2b20      	cmp	r3, #32
 8006366:	d137      	bne.n	80063d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_Receive_DMA+0x24>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e030      	b.n	80063da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_UART_Receive_DMA+0x94>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01f      	beq.n	80063c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	613b      	str	r3, [r7, #16]
   return(result);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e6      	bne.n	8006396 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f001 f822 	bl	8007418 <UART_Start_Receive_DMA>
 80063d4:	4603      	mov	r3, r0
 80063d6:	e000      	b.n	80063da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063d8:	2302      	movs	r3, #2
  }
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40008000 	.word	0x40008000

080063e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b0ba      	sub	sp, #232	; 0xe8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800640e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006412:	f640 030f 	movw	r3, #2063	; 0x80f
 8006416:	4013      	ands	r3, r2
 8006418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800641c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11b      	bne.n	800645c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d015      	beq.n	800645c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d105      	bne.n	8006448 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800643c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 82e3 	beq.w	8006a18 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
      }
      return;
 800645a:	e2dd      	b.n	8006a18 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800645c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8123 	beq.w	80066ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006466:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800646a:	4b8d      	ldr	r3, [pc, #564]	; (80066a0 <HAL_UART_IRQHandler+0x2b8>)
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006476:	4b8b      	ldr	r3, [pc, #556]	; (80066a4 <HAL_UART_IRQHandler+0x2bc>)
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8116 	beq.w	80066ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d011      	beq.n	80064b0 <HAL_UART_IRQHandler+0xc8>
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d011      	beq.n	80064e0 <HAL_UART_IRQHandler+0xf8>
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2202      	movs	r2, #2
 80064ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f043 0204 	orr.w	r2, r3, #4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <HAL_UART_IRQHandler+0x128>
 80064ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2204      	movs	r2, #4
 80064fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f043 0202 	orr.w	r2, r3, #2
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d017      	beq.n	800654c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006528:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800652c:	4b5c      	ldr	r3, [pc, #368]	; (80066a0 <HAL_UART_IRQHandler+0x2b8>)
 800652e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2208      	movs	r2, #8
 800653a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f043 0208 	orr.w	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006554:	2b00      	cmp	r3, #0
 8006556:	d012      	beq.n	800657e <HAL_UART_IRQHandler+0x196>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00c      	beq.n	800657e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800656c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8249 	beq.w	8006a1c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d105      	bne.n	80065ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d005      	beq.n	80065e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d054      	beq.n	800668c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ffff 	bl	80075e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d146      	bne.n	8006684 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800660c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800662e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800663a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1d9      	bne.n	80065f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006648:	2b00      	cmp	r3, #0
 800664a:	d017      	beq.n	800667c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <HAL_UART_IRQHandler+0x2c0>)
 8006654:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665c:	4618      	mov	r0, r3
 800665e:	f7fc fd83 	bl	8003168 <HAL_DMA_Abort_IT>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d019      	beq.n	800669c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006676:	4610      	mov	r0, r2
 8006678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667a:	e00f      	b.n	800669c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f9ff 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006682:	e00b      	b.n	800669c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f9fb 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668a:	e007      	b.n	800669c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9f7 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800669a:	e1bf      	b.n	8006a1c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	bf00      	nop
    return;
 800669e:	e1bd      	b.n	8006a1c <HAL_UART_IRQHandler+0x634>
 80066a0:	10000001 	.word	0x10000001
 80066a4:	04000120 	.word	0x04000120
 80066a8:	08007953 	.word	0x08007953

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	f040 8153 	bne.w	800695c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 814c 	beq.w	800695c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8145 	beq.w	800695c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2210      	movs	r2, #16
 80066d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	f040 80bb 	bne.w	8006860 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 818f 	beq.w	8006a20 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006708:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800670c:	429a      	cmp	r2, r3
 800670e:	f080 8187 	bcs.w	8006a20 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 8087 	bne.w	800683e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800675a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800675e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006766:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1da      	bne.n	8006730 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800678a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800679e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e1      	bne.n	800677a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e3      	bne.n	80067b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800680a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680c:	f023 0310 	bic.w	r3, r3, #16
 8006810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800681e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006820:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800682c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e4      	bne.n	80067fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006838:	4618      	mov	r0, r3
 800683a:	f7fc fc3c 	bl	80030b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006850:	b29b      	uxth	r3, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	b29b      	uxth	r3, r3
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f91b 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800685e:	e0df      	b.n	8006a20 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800686c:	b29b      	uxth	r3, r3
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80d1 	beq.w	8006a24 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80cc 	beq.w	8006a24 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ae:	647b      	str	r3, [r7, #68]	; 0x44
 80068b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e4      	bne.n	800688c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	623b      	str	r3, [r7, #32]
   return(result);
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068ea:	633a      	str	r2, [r7, #48]	; 0x30
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e1      	bne.n	80068c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	69b9      	ldr	r1, [r7, #24]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	617b      	str	r3, [r7, #20]
   return(result);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e4      	bne.n	8006912 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800694e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f89d 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800695a:	e063      	b.n	8006a24 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <HAL_UART_IRQHandler+0x59e>
 8006968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800697c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f828 	bl	80079d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006984:	e051      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d014      	beq.n	80069bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800699e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d008      	beq.n	80069bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d03a      	beq.n	8006a28 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
    }
    return;
 80069ba:	e035      	b.n	8006a28 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <HAL_UART_IRQHandler+0x5f4>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 ffd2 	bl	800797e <UART_EndTransmit_IT>
    return;
 80069da:	e026      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_UART_IRQHandler+0x614>
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f801 	bl	80079fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069fa:	e016      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d010      	beq.n	8006a2a <HAL_UART_IRQHandler+0x642>
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	da0c      	bge.n	8006a2a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 ffe9 	bl	80079e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a16:	e008      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
      return;
 8006a18:	bf00      	nop
 8006a1a:	e006      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
    return;
 8006a1c:	bf00      	nop
 8006a1e:	e004      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
      return;
 8006a20:	bf00      	nop
 8006a22:	e002      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
      return;
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <HAL_UART_IRQHandler+0x642>
    return;
 8006a28:	bf00      	nop
  }
}
 8006a2a:	37e8      	adds	r7, #232	; 0xe8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab0:	b08c      	sub	sp, #48	; 0x30
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4baa      	ldr	r3, [pc, #680]	; (8006d84 <UART_SetConfig+0x2d8>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a9f      	ldr	r2, [pc, #636]	; (8006d88 <UART_SetConfig+0x2dc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b14:	4313      	orrs	r3, r2
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	f023 010f 	bic.w	r1, r3, #15
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a90      	ldr	r2, [pc, #576]	; (8006d8c <UART_SetConfig+0x2e0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d125      	bne.n	8006b9c <UART_SetConfig+0xf0>
 8006b50:	4b8f      	ldr	r3, [pc, #572]	; (8006d90 <UART_SetConfig+0x2e4>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d81a      	bhi.n	8006b94 <UART_SetConfig+0xe8>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0xb8>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b75 	.word	0x08006b75
 8006b68:	08006b85 	.word	0x08006b85
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b8d 	.word	0x08006b8d
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7a:	e116      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b82:	e112      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e10e      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b92:	e10a      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e106      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a7c      	ldr	r2, [pc, #496]	; (8006d94 <UART_SetConfig+0x2e8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d138      	bne.n	8006c18 <UART_SetConfig+0x16c>
 8006ba6:	4b7a      	ldr	r3, [pc, #488]	; (8006d90 <UART_SetConfig+0x2e4>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	d82d      	bhi.n	8006c10 <UART_SetConfig+0x164>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x110>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006bf1 	.word	0x08006bf1
 8006bc0:	08006c11 	.word	0x08006c11
 8006bc4:	08006c11 	.word	0x08006c11
 8006bc8:	08006c11 	.word	0x08006c11
 8006bcc:	08006c01 	.word	0x08006c01
 8006bd0:	08006c11 	.word	0x08006c11
 8006bd4:	08006c11 	.word	0x08006c11
 8006bd8:	08006c11 	.word	0x08006c11
 8006bdc:	08006bf9 	.word	0x08006bf9
 8006be0:	08006c11 	.word	0x08006c11
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c11 	.word	0x08006c11
 8006bec:	08006c09 	.word	0x08006c09
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf6:	e0d8      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	e0d4      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c06:	e0d0      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0e:	e0cc      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c16:	e0c8      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a5e      	ldr	r2, [pc, #376]	; (8006d98 <UART_SetConfig+0x2ec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d125      	bne.n	8006c6e <UART_SetConfig+0x1c2>
 8006c22:	4b5b      	ldr	r3, [pc, #364]	; (8006d90 <UART_SetConfig+0x2e4>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c2c:	2b30      	cmp	r3, #48	; 0x30
 8006c2e:	d016      	beq.n	8006c5e <UART_SetConfig+0x1b2>
 8006c30:	2b30      	cmp	r3, #48	; 0x30
 8006c32:	d818      	bhi.n	8006c66 <UART_SetConfig+0x1ba>
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d00a      	beq.n	8006c4e <UART_SetConfig+0x1a2>
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d814      	bhi.n	8006c66 <UART_SetConfig+0x1ba>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <UART_SetConfig+0x19a>
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d008      	beq.n	8006c56 <UART_SetConfig+0x1aa>
 8006c44:	e00f      	b.n	8006c66 <UART_SetConfig+0x1ba>
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4c:	e0ad      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c54:	e0a9      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c56:	2304      	movs	r3, #4
 8006c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5c:	e0a5      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c5e:	2308      	movs	r3, #8
 8006c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c64:	e0a1      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c66:	2310      	movs	r3, #16
 8006c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6c:	e09d      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a4a      	ldr	r2, [pc, #296]	; (8006d9c <UART_SetConfig+0x2f0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d125      	bne.n	8006cc4 <UART_SetConfig+0x218>
 8006c78:	4b45      	ldr	r3, [pc, #276]	; (8006d90 <UART_SetConfig+0x2e4>)
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c82:	2bc0      	cmp	r3, #192	; 0xc0
 8006c84:	d016      	beq.n	8006cb4 <UART_SetConfig+0x208>
 8006c86:	2bc0      	cmp	r3, #192	; 0xc0
 8006c88:	d818      	bhi.n	8006cbc <UART_SetConfig+0x210>
 8006c8a:	2b80      	cmp	r3, #128	; 0x80
 8006c8c:	d00a      	beq.n	8006ca4 <UART_SetConfig+0x1f8>
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	d814      	bhi.n	8006cbc <UART_SetConfig+0x210>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <UART_SetConfig+0x1f0>
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d008      	beq.n	8006cac <UART_SetConfig+0x200>
 8006c9a:	e00f      	b.n	8006cbc <UART_SetConfig+0x210>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca2:	e082      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006caa:	e07e      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006cac:	2304      	movs	r3, #4
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cb2:	e07a      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cba:	e076      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e072      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a35      	ldr	r2, [pc, #212]	; (8006da0 <UART_SetConfig+0x2f4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d12a      	bne.n	8006d24 <UART_SetConfig+0x278>
 8006cce:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <UART_SetConfig+0x2e4>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cdc:	d01a      	beq.n	8006d14 <UART_SetConfig+0x268>
 8006cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce2:	d81b      	bhi.n	8006d1c <UART_SetConfig+0x270>
 8006ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce8:	d00c      	beq.n	8006d04 <UART_SetConfig+0x258>
 8006cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cee:	d815      	bhi.n	8006d1c <UART_SetConfig+0x270>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <UART_SetConfig+0x250>
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf8:	d008      	beq.n	8006d0c <UART_SetConfig+0x260>
 8006cfa:	e00f      	b.n	8006d1c <UART_SetConfig+0x270>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d02:	e052      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d04:	2302      	movs	r3, #2
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d0a:	e04e      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d12:	e04a      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d14:	2308      	movs	r3, #8
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d1a:	e046      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e042      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <UART_SetConfig+0x2dc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d13a      	bne.n	8006da4 <UART_SetConfig+0x2f8>
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <UART_SetConfig+0x2e4>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d3c:	d01a      	beq.n	8006d74 <UART_SetConfig+0x2c8>
 8006d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d42:	d81b      	bhi.n	8006d7c <UART_SetConfig+0x2d0>
 8006d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d48:	d00c      	beq.n	8006d64 <UART_SetConfig+0x2b8>
 8006d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4e:	d815      	bhi.n	8006d7c <UART_SetConfig+0x2d0>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <UART_SetConfig+0x2b0>
 8006d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d58:	d008      	beq.n	8006d6c <UART_SetConfig+0x2c0>
 8006d5a:	e00f      	b.n	8006d7c <UART_SetConfig+0x2d0>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d62:	e022      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d64:	2302      	movs	r3, #2
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6a:	e01e      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d72:	e01a      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d74:	2308      	movs	r3, #8
 8006d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d7a:	e016      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d82:	e012      	b.n	8006daa <UART_SetConfig+0x2fe>
 8006d84:	cfff69f3 	.word	0xcfff69f3
 8006d88:	40008000 	.word	0x40008000
 8006d8c:	40013800 	.word	0x40013800
 8006d90:	40021000 	.word	0x40021000
 8006d94:	40004400 	.word	0x40004400
 8006d98:	40004800 	.word	0x40004800
 8006d9c:	40004c00 	.word	0x40004c00
 8006da0:	40005000 	.word	0x40005000
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4aae      	ldr	r2, [pc, #696]	; (8007068 <UART_SetConfig+0x5bc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	f040 8097 	bne.w	8006ee4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d823      	bhi.n	8006e06 <UART_SetConfig+0x35a>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0x318>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006e07 	.word	0x08006e07
 8006dcc:	08006df1 	.word	0x08006df1
 8006dd0:	08006e07 	.word	0x08006e07
 8006dd4:	08006df7 	.word	0x08006df7
 8006dd8:	08006e07 	.word	0x08006e07
 8006ddc:	08006e07 	.word	0x08006e07
 8006de0:	08006e07 	.word	0x08006e07
 8006de4:	08006dff 	.word	0x08006dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de8:	f7fd fabc 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8006dec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dee:	e010      	b.n	8006e12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df0:	4b9e      	ldr	r3, [pc, #632]	; (800706c <UART_SetConfig+0x5c0>)
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006df4:	e00d      	b.n	8006e12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006df6:	f7fd fa47 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8006dfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dfc:	e009      	b.n	8006e12 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e04:	e005      	b.n	8006e12 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8130 	beq.w	800707a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	4a94      	ldr	r2, [pc, #592]	; (8007070 <UART_SetConfig+0x5c4>)
 8006e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e2c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d305      	bcc.n	8006e4a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d903      	bls.n	8006e52 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e50:	e113      	b.n	800707a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	2200      	movs	r2, #0
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	60fa      	str	r2, [r7, #12]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	4a84      	ldr	r2, [pc, #528]	; (8007070 <UART_SetConfig+0x5c4>)
 8006e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2200      	movs	r2, #0
 8006e68:	603b      	str	r3, [r7, #0]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e74:	f7f9 f9d0 	bl	8000218 <__aeabi_uldivmod>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	020b      	lsls	r3, r1, #8
 8006e8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e8e:	0202      	lsls	r2, r0, #8
 8006e90:	6979      	ldr	r1, [r7, #20]
 8006e92:	6849      	ldr	r1, [r1, #4]
 8006e94:	0849      	lsrs	r1, r1, #1
 8006e96:	2000      	movs	r0, #0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	eb12 0804 	adds.w	r8, r2, r4
 8006ea0:	eb43 0905 	adc.w	r9, r3, r5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	469a      	mov	sl, r3
 8006eac:	4693      	mov	fp, r2
 8006eae:	4652      	mov	r2, sl
 8006eb0:	465b      	mov	r3, fp
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	f7f9 f9af 	bl	8000218 <__aeabi_uldivmod>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec8:	d308      	bcc.n	8006edc <UART_SetConfig+0x430>
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed0:	d204      	bcs.n	8006edc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a3a      	ldr	r2, [r7, #32]
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	e0ce      	b.n	800707a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ee2:	e0ca      	b.n	800707a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eec:	d166      	bne.n	8006fbc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d827      	bhi.n	8006f46 <UART_SetConfig+0x49a>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x450>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	08006f47 	.word	0x08006f47
 8006f0c:	08006f37 	.word	0x08006f37
 8006f10:	08006f47 	.word	0x08006f47
 8006f14:	08006f47 	.word	0x08006f47
 8006f18:	08006f47 	.word	0x08006f47
 8006f1c:	08006f3f 	.word	0x08006f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f20:	f7fd fa20 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8006f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f26:	e014      	b.n	8006f52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f28:	f7fd fa32 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f2e:	e010      	b.n	8006f52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f30:	4b4e      	ldr	r3, [pc, #312]	; (800706c <UART_SetConfig+0x5c0>)
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f34:	e00d      	b.n	8006f52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f36:	f7fd f9a7 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f3c:	e009      	b.n	8006f52 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f44:	e005      	b.n	8006f52 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8090 	beq.w	800707a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	4a44      	ldr	r2, [pc, #272]	; (8007070 <UART_SetConfig+0x5c4>)
 8006f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6c:	005a      	lsls	r2, r3, #1
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	441a      	add	r2, r3
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	2b0f      	cmp	r3, #15
 8006f84:	d916      	bls.n	8006fb4 <UART_SetConfig+0x508>
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8c:	d212      	bcs.n	8006fb4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f023 030f 	bic.w	r3, r3, #15
 8006f96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	8bfb      	ldrh	r3, [r7, #30]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	8bfa      	ldrh	r2, [r7, #30]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	e062      	b.n	800707a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fba:	e05e      	b.n	800707a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d828      	bhi.n	8007016 <UART_SetConfig+0x56a>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x520>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	08007001 	.word	0x08007001
 8006fd8:	08007017 	.word	0x08007017
 8006fdc:	08007007 	.word	0x08007007
 8006fe0:	08007017 	.word	0x08007017
 8006fe4:	08007017 	.word	0x08007017
 8006fe8:	08007017 	.word	0x08007017
 8006fec:	0800700f 	.word	0x0800700f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff0:	f7fd f9b8 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ff6:	e014      	b.n	8007022 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff8:	f7fd f9ca 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8006ffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ffe:	e010      	b.n	8007022 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007000:	4b1a      	ldr	r3, [pc, #104]	; (800706c <UART_SetConfig+0x5c0>)
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007004:	e00d      	b.n	8007022 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007006:	f7fd f93f 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 800700a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800700c:	e009      	b.n	8007022 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007014:	e005      	b.n	8007022 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007020:	bf00      	nop
    }

    if (pclk != 0U)
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	2b00      	cmp	r3, #0
 8007026:	d028      	beq.n	800707a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	4a10      	ldr	r2, [pc, #64]	; (8007070 <UART_SetConfig+0x5c4>)
 800702e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007032:	461a      	mov	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	fbb3 f2f2 	udiv	r2, r3, r2
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	085b      	lsrs	r3, r3, #1
 8007040:	441a      	add	r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	fbb2 f3f3 	udiv	r3, r2, r3
 800704a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	2b0f      	cmp	r3, #15
 8007050:	d910      	bls.n	8007074 <UART_SetConfig+0x5c8>
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007058:	d20c      	bcs.n	8007074 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	b29a      	uxth	r2, r3
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60da      	str	r2, [r3, #12]
 8007064:	e009      	b.n	800707a <UART_SetConfig+0x5ce>
 8007066:	bf00      	nop
 8007068:	40008000 	.word	0x40008000
 800706c:	00f42400 	.word	0x00f42400
 8007070:	08007ca0 	.word	0x08007ca0
      }
      else
      {
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2201      	movs	r2, #1
 800707e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2201      	movs	r2, #1
 8007086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007096:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800709a:	4618      	mov	r0, r3
 800709c:	3730      	adds	r7, #48	; 0x30
 800709e:	46bd      	mov	sp, r7
 80070a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080070a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01a      	beq.n	80071ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a2:	d10a      	bne.n	80071ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	605a      	str	r2, [r3, #4]
  }
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b098      	sub	sp, #96	; 0x60
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071f8:	f7fa f8a6 	bl	8001348 <HAL_GetTick>
 80071fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b08      	cmp	r3, #8
 800720a:	d12f      	bne.n	800726c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800720c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007214:	2200      	movs	r2, #0
 8007216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f88e 	bl	800733c <UART_WaitOnFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d022      	beq.n	800726c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723a:	653b      	str	r3, [r7, #80]	; 0x50
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007244:	647b      	str	r3, [r7, #68]	; 0x44
 8007246:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800724a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e6      	bne.n	8007226 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e063      	b.n	8007334 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b04      	cmp	r3, #4
 8007278:	d149      	bne.n	800730e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800727a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007282:	2200      	movs	r2, #0
 8007284:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f857 	bl	800733c <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d03c      	beq.n	800730e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	623b      	str	r3, [r7, #32]
   return(result);
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b2:	633b      	str	r3, [r7, #48]	; 0x30
 80072b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e6      	bne.n	8007294 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e6:	61fa      	str	r2, [r7, #28]
 80072e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	69b9      	ldr	r1, [r7, #24]
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	617b      	str	r3, [r7, #20]
   return(result);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e5      	bne.n	80072c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e012      	b.n	8007334 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3758      	adds	r7, #88	; 0x58
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734c:	e04f      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d04b      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007356:	f7f9 fff7 	bl	8001348 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <UART_WaitOnFlagUntilTimeout+0x30>
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e04e      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d037      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b80      	cmp	r3, #128	; 0x80
 8007382:	d034      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	d031      	beq.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b08      	cmp	r3, #8
 8007396:	d110      	bne.n	80073ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2208      	movs	r2, #8
 800739e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f920 	bl	80075e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2208      	movs	r2, #8
 80073aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e029      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c8:	d111      	bne.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f906 	bl	80075e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e00f      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	429a      	cmp	r2, r3
 800740a:	d0a0      	beq.n	800734e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b096      	sub	sp, #88	; 0x58
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2222      	movs	r2, #34	; 0x22
 8007440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d02d      	beq.n	80074aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007454:	4a40      	ldr	r2, [pc, #256]	; (8007558 <UART_Start_Receive_DMA+0x140>)
 8007456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800745e:	4a3f      	ldr	r2, [pc, #252]	; (800755c <UART_Start_Receive_DMA+0x144>)
 8007460:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007468:	4a3d      	ldr	r2, [pc, #244]	; (8007560 <UART_Start_Receive_DMA+0x148>)
 800746a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007472:	2200      	movs	r2, #0
 8007474:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3324      	adds	r3, #36	; 0x24
 8007482:	4619      	mov	r1, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007488:	461a      	mov	r2, r3
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	f7fb fd98 	bl	8002fc0 <HAL_DMA_Start_IT>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2210      	movs	r2, #16
 800749a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e051      	b.n	800754e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d018      	beq.n	80074e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c6:	657b      	str	r3, [r7, #84]	; 0x54
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	653b      	str	r3, [r7, #80]	; 0x50
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3308      	adds	r3, #8
 8007502:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007504:	637a      	str	r2, [r7, #52]	; 0x34
 8007506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800750a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	613b      	str	r3, [r7, #16]
   return(result);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007538:	623a      	str	r2, [r7, #32]
 800753a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	69f9      	ldr	r1, [r7, #28]
 800753e:	6a3a      	ldr	r2, [r7, #32]
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	61bb      	str	r3, [r7, #24]
   return(result);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3758      	adds	r7, #88	; 0x58
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	08007769 	.word	0x08007769
 800755c:	08007895 	.word	0x08007895
 8007560:	080078d3 	.word	0x080078d3

08007564 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b08f      	sub	sp, #60	; 0x3c
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	61fb      	str	r3, [r7, #28]
   return(result);
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800758c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	61ba      	str	r2, [r7, #24]
 80075c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6979      	ldr	r1, [r7, #20]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	613b      	str	r3, [r7, #16]
   return(result);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80075da:	bf00      	nop
 80075dc:	373c      	adds	r7, #60	; 0x3c
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b095      	sub	sp, #84	; 0x54
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
 800760e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800764a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e3      	bne.n	8007620 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d118      	bne.n	8007692 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	60bb      	str	r3, [r7, #8]
   return(result);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0310 	bic.w	r3, r3, #16
 8007674:	647b      	str	r3, [r7, #68]	; 0x44
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6979      	ldr	r1, [r7, #20]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	613b      	str	r3, [r7, #16]
   return(result);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80076a6:	bf00      	nop
 80076a8:	3754      	adds	r7, #84	; 0x54
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b090      	sub	sp, #64	; 0x40
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d137      	bne.n	800773e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80076ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	623b      	str	r3, [r7, #32]
   return(result);
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f6:	633a      	str	r2, [r7, #48]	; 0x30
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	60fb      	str	r3, [r7, #12]
   return(result);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
 8007720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	617b      	str	r3, [r7, #20]
   return(result);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800773c:	e002      	b.n	8007744 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800773e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007740:	f7ff f976 	bl	8006a30 <HAL_UART_TxCpltCallback>
}
 8007744:	bf00      	nop
 8007746:	3740      	adds	r7, #64	; 0x40
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff f972 	bl	8006a44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b09c      	sub	sp, #112	; 0x70
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d171      	bne.n	8007868 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007786:	2200      	movs	r2, #0
 8007788:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800778c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800779a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	667b      	str	r3, [r7, #100]	; 0x64
 80077d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077de:	647a      	str	r2, [r7, #68]	; 0x44
 80077e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	623b      	str	r3, [r7, #32]
   return(result);
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007808:	663b      	str	r3, [r7, #96]	; 0x60
 800780a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007812:	633a      	str	r2, [r7, #48]	; 0x30
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e5      	bne.n	80077f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007832:	2b01      	cmp	r3, #1
 8007834:	d118      	bne.n	8007868 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60fb      	str	r3, [r7, #12]
   return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800784c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	69b9      	ldr	r1, [r7, #24]
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	617b      	str	r3, [r7, #20]
   return(result);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e6      	bne.n	8007836 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786a:	2200      	movs	r2, #0
 800786c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007872:	2b01      	cmp	r3, #1
 8007874:	d107      	bne.n	8007886 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800787c:	4619      	mov	r1, r3
 800787e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007880:	f7ff f908 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007884:	e002      	b.n	800788c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007886:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007888:	f7ff f8e6 	bl	8006a58 <HAL_UART_RxCpltCallback>
}
 800788c:	bf00      	nop
 800788e:	3770      	adds	r7, #112	; 0x70
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d109      	bne.n	80078c4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff f8e9 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078c2:	e002      	b.n	80078ca <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff f8d1 	bl	8006a6c <HAL_UART_RxHalfCpltCallback>
}
 80078ca:	bf00      	nop
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fa:	2b80      	cmp	r3, #128	; 0x80
 80078fc:	d109      	bne.n	8007912 <UART_DMAError+0x40>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b21      	cmp	r3, #33	; 0x21
 8007902:	d106      	bne.n	8007912 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2200      	movs	r2, #0
 8007908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800790c:	6978      	ldr	r0, [r7, #20]
 800790e:	f7ff fe29 	bl	8007564 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d109      	bne.n	8007934 <UART_DMAError+0x62>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b22      	cmp	r3, #34	; 0x22
 8007924:	d106      	bne.n	8007934 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f7ff fe59 	bl	80075e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	f043 0210 	orr.w	r2, r3, #16
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007944:	6978      	ldr	r0, [r7, #20]
 8007946:	f7ff f89b 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794a:	bf00      	nop
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff f885 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b088      	sub	sp, #32
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	60bb      	str	r3, [r7, #8]
   return(result);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6979      	ldr	r1, [r7, #20]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	613b      	str	r3, [r7, #16]
   return(result);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e6      	bne.n	8007986 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff f832 	bl	8006a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079cc:	bf00      	nop
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e027      	b.n	8007a76 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2224      	movs	r2, #36	; 0x24
 8007a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e02d      	b.n	8007af6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2224      	movs	r2, #36	; 0x24
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f850 	bl	8007b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e02d      	b.n	8007b72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2224      	movs	r2, #36	; 0x24
 8007b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f812 	bl	8007b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d108      	bne.n	8007b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b9c:	e031      	b.n	8007c02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	0e5b      	lsrs	r3, r3, #25
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	0f5b      	lsrs	r3, r3, #29
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	7b3a      	ldrb	r2, [r7, #12]
 8007bca:	4911      	ldr	r1, [pc, #68]	; (8007c10 <UARTEx_SetNbDataToProcess+0x94>)
 8007bcc:	5c8a      	ldrb	r2, [r1, r2]
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bd2:	7b3a      	ldrb	r2, [r7, #12]
 8007bd4:	490f      	ldr	r1, [pc, #60]	; (8007c14 <UARTEx_SetNbDataToProcess+0x98>)
 8007bd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	7b7a      	ldrb	r2, [r7, #13]
 8007be8:	4909      	ldr	r1, [pc, #36]	; (8007c10 <UARTEx_SetNbDataToProcess+0x94>)
 8007bea:	5c8a      	ldrb	r2, [r1, r2]
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bf0:	7b7a      	ldrb	r2, [r7, #13]
 8007bf2:	4908      	ldr	r1, [pc, #32]	; (8007c14 <UARTEx_SetNbDataToProcess+0x98>)
 8007bf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	08007cb8 	.word	0x08007cb8
 8007c14:	08007cc0 	.word	0x08007cc0

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4d0d      	ldr	r5, [pc, #52]	; (8007c60 <__libc_init_array+0x38>)
 8007c2c:	4c0d      	ldr	r4, [pc, #52]	; (8007c64 <__libc_init_array+0x3c>)
 8007c2e:	1b64      	subs	r4, r4, r5
 8007c30:	10a4      	asrs	r4, r4, #2
 8007c32:	2600      	movs	r6, #0
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	4d0b      	ldr	r5, [pc, #44]	; (8007c68 <__libc_init_array+0x40>)
 8007c3a:	4c0c      	ldr	r4, [pc, #48]	; (8007c6c <__libc_init_array+0x44>)
 8007c3c:	f000 f818 	bl	8007c70 <_init>
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	2600      	movs	r6, #0
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	08007cd0 	.word	0x08007cd0
 8007c64:	08007cd0 	.word	0x08007cd0
 8007c68:	08007cd0 	.word	0x08007cd0
 8007c6c:	08007cd4 	.word	0x08007cd4

08007c70 <_init>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr

08007c7c <_fini>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr
