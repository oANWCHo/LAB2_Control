
LAB2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006718  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006930  08006930  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006938  08006938  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800693c  0800693c  0001693c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006940  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000038  08006974  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08006974  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ceb  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bea  00000000  00000000  00037d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001082  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280bf  00000000  00000000  0003cf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001857f  00000000  00000000  00064fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111686  00000000  00000000  0007d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d44  00000000  00000000  0018ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00194934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000038 	.word	0x20000038
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080068d8 	.word	0x080068d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000003c 	.word	0x2000003c
 8000214:	080068d8 	.word	0x080068d8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b970 	b.w	8000d8c <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 fe59 	bl	8001a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 fa52 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 fc10 	bl	80015c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da4:	f000 fbe4 	bl	8001570 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000da8:	f000 fb4a 	bl	8001440 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000dac:	f000 fb92 	bl	80014d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000db0:	f000 fa94 	bl	80012dc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000db4:	f000 fb0a 	bl	80013cc <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000db8:	4810      	ldr	r0, [pc, #64]	; (8000dfc <main+0x6c>)
 8000dba:	f004 fb87 	bl	80054cc <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dbe:	217f      	movs	r1, #127	; 0x7f
 8000dc0:	480f      	ldr	r0, [pc, #60]	; (8000e00 <main+0x70>)
 8000dc2:	f002 f9c3 	bl	800314c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCRead, 10);
 8000dc6:	220a      	movs	r2, #10
 8000dc8:	490e      	ldr	r1, [pc, #56]	; (8000e04 <main+0x74>)
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <main+0x70>)
 8000dcc:	f001 fab0 	bl	8002330 <HAL_ADC_Start_DMA>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <main+0x78>)
 8000dda:	f002 fcbf 	bl	800375c <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000dde:	2100      	movs	r1, #0
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <main+0x78>)
 8000de2:	f002 fc4f 	bl	8003684 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  if(__HAL_DMA_GET_COUNTER(hadc1.DMA_Handle)>=1){
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <main+0x70>)
 8000de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d026      	beq.n	8000e40 <main+0xb0>
	  		  uint32_t sumadc = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
	  		  for(int i = 0 ; i<9;i++){
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	e012      	b.n	8000e22 <main+0x92>
 8000dfc:	200001c8 	.word	0x200001c8
 8000e00:	20000054 	.word	0x20000054
 8000e04:	2000025c 	.word	0x2000025c
 8000e08:	20000120 	.word	0x20000120
	  			  sumadc += ADCRead[i];
 8000e0c:	4ab8      	ldr	r2, [pc, #736]	; (80010f0 <main+0x360>)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	607b      	str	r3, [r7, #4]
	  		  for(int i = 0 ; i<9;i++){
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	ddf1      	ble.n	8000e0c <main+0x7c>
	  		  }
	  		  ADC_avg = sumadc/9;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4ab2      	ldr	r2, [pc, #712]	; (80010f4 <main+0x364>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	085b      	lsrs	r3, r3, #1
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3a:	4baf      	ldr	r3, [pc, #700]	; (80010f8 <main+0x368>)
 8000e3c:	edc3 7a00 	vstr	s15, [r3]
	  	  }

		  static uint32_t timestamp = 0;
		  if(timestamp<=__HAL_TIM_GET_COUNTER(&htim2))
 8000e40:	4bae      	ldr	r3, [pc, #696]	; (80010fc <main+0x36c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e46:	4bae      	ldr	r3, [pc, #696]	; (8001100 <main+0x370>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3cb      	bcc.n	8000de6 <main+0x56>
		  {
			  //re-time
			  timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
 8000e4e:	4bab      	ldr	r3, [pc, #684]	; (80010fc <main+0x36c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000e58:	4aa9      	ldr	r2, [pc, #676]	; (8001100 <main+0x370>)
 8000e5a:	6013      	str	r3, [r2, #0]

			  //equation

			  Vin = ADC_avg*3.3/4095;
 8000e5c:	4ba6      	ldr	r3, [pc, #664]	; (80010f8 <main+0x368>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb3d 	bl	80004e0 <__aeabi_f2d>
 8000e66:	a39e      	add	r3, pc, #632	; (adr r3, 80010e0 <main+0x350>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fb90 	bl	8000590 <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	a39b      	add	r3, pc, #620	; (adr r3, 80010e8 <main+0x358>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fcb1 	bl	80007e4 <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	499f      	ldr	r1, [pc, #636]	; (8001104 <main+0x374>)
 8000e88:	e9c1 2300 	strd	r2, r3, [r1]
			  Vin = Vin*12/3.3;
 8000e8c:	4b9d      	ldr	r3, [pc, #628]	; (8001104 <main+0x374>)
 8000e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b9c      	ldr	r3, [pc, #624]	; (8001108 <main+0x378>)
 8000e98:	f7ff fb7a 	bl	8000590 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	a38e      	add	r3, pc, #568	; (adr r3, 80010e0 <main+0x350>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fc9b 	bl	80007e4 <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4994      	ldr	r1, [pc, #592]	; (8001104 <main+0x374>)
 8000eb4:	e9c1 2300 	strd	r2, r3, [r1]

			  num = (K_t*T*T*Vin)+(((2*J*L)+(J*R*T)+(L*B*T))*omega_1)-(J*L*omega_2);
 8000eb8:	4b94      	ldr	r3, [pc, #592]	; (800110c <main+0x37c>)
 8000eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ebe:	4b94      	ldr	r3, [pc, #592]	; (8001110 <main+0x380>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fb64 	bl	8000590 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4b8f      	ldr	r3, [pc, #572]	; (8001110 <main+0x380>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff fb5b 	bl	8000590 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4b88      	ldr	r3, [pc, #544]	; (8001104 <main+0x374>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb52 	bl	8000590 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4614      	mov	r4, r2
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	4b87      	ldr	r3, [pc, #540]	; (8001114 <main+0x384>)
 8000ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	f7ff f991 	bl	8000224 <__adddf3>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4b83      	ldr	r3, [pc, #524]	; (8001118 <main+0x388>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	f7ff fb3e 	bl	8000590 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4690      	mov	r8, r2
 8000f1a:	4699      	mov	r9, r3
 8000f1c:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <main+0x384>)
 8000f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f22:	4b7e      	ldr	r3, [pc, #504]	; (800111c <main+0x38c>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fb32 	bl	8000590 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	4b76      	ldr	r3, [pc, #472]	; (8001110 <main+0x380>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff fb29 	bl	8000590 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4640      	mov	r0, r8
 8000f44:	4649      	mov	r1, r9
 8000f46:	f7ff f96d 	bl	8000224 <__adddf3>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4690      	mov	r8, r2
 8000f50:	4699      	mov	r9, r3
 8000f52:	4b71      	ldr	r3, [pc, #452]	; (8001118 <main+0x388>)
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	4b71      	ldr	r3, [pc, #452]	; (8001120 <main+0x390>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff fb17 	bl	8000590 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4b69      	ldr	r3, [pc, #420]	; (8001110 <main+0x380>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb0e 	bl	8000590 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4640      	mov	r0, r8
 8000f7a:	4649      	mov	r1, r9
 8000f7c:	f7ff f952 	bl	8000224 <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <main+0x394>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff faff 	bl	8000590 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff f943 	bl	8000224 <__adddf3>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4614      	mov	r4, r2
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	4b5b      	ldr	r3, [pc, #364]	; (8001114 <main+0x384>)
 8000fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fac:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <main+0x388>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff faed 	bl	8000590 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <main+0x398>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fae4 	bl	8000590 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f7ff f926 	bl	8000220 <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4954      	ldr	r1, [pc, #336]	; (800112c <main+0x39c>)
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]
			  den = (J*L)+(J*R*T)+(L*B*T)+(R*B*T*T)+(K_t*K_e*T*T);
 8000fde:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <main+0x384>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <main+0x388>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fad1 	bl	8000590 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	4b47      	ldr	r3, [pc, #284]	; (8001114 <main+0x384>)
 8000ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <main+0x38c>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fac5 	bl	8000590 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	4b40      	ldr	r3, [pc, #256]	; (8001110 <main+0x380>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fabc 	bl	8000590 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4620      	mov	r0, r4
 800101e:	4629      	mov	r1, r5
 8001020:	f7ff f900 	bl	8000224 <__adddf3>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4614      	mov	r4, r2
 800102a:	461d      	mov	r5, r3
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <main+0x388>)
 800102e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <main+0x390>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff faaa 	bl	8000590 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <main+0x380>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff faa1 	bl	8000590 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff f8e5 	bl	8000224 <__adddf3>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <main+0x38c>)
 8001064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <main+0x390>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fa8f 	bl	8000590 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <main+0x380>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fa86 	bl	8000590 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <main+0x380>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fa7d 	bl	8000590 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4620      	mov	r0, r4
 800109c:	4629      	mov	r1, r5
 800109e:	f7ff f8c1 	bl	8000224 <__adddf3>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	461d      	mov	r5, r3
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <main+0x37c>)
 80010ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <main+0x3a0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa6b 	bl	8000590 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <main+0x380>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa62 	bl	8000590 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <main+0x380>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	e02b      	b.n	8001134 <main+0x3a4>
 80010dc:	f3af 8000 	nop.w
 80010e0:	66666666 	.word	0x66666666
 80010e4:	400a6666 	.word	0x400a6666
 80010e8:	00000000 	.word	0x00000000
 80010ec:	40affe00 	.word	0x40affe00
 80010f0:	2000025c 	.word	0x2000025c
 80010f4:	38e38e39 	.word	0x38e38e39
 80010f8:	20000258 	.word	0x20000258
 80010fc:	200001c8 	.word	0x200001c8
 8001100:	20000278 	.word	0x20000278
 8001104:	20000218 	.word	0x20000218
 8001108:	40280000 	.word	0x40280000
 800110c:	20000018 	.word	0x20000018
 8001110:	20000000 	.word	0x20000000
 8001114:	20000240 	.word	0x20000240
 8001118:	20000010 	.word	0x20000010
 800111c:	20000008 	.word	0x20000008
 8001120:	20000238 	.word	0x20000238
 8001124:	20000228 	.word	0x20000228
 8001128:	20000230 	.word	0x20000230
 800112c:	20000248 	.word	0x20000248
 8001130:	20000020 	.word	0x20000020
 8001134:	f7ff fa2c 	bl	8000590 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff f870 	bl	8000224 <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <main+0x490>)
 800114a:	e9c1 2300 	strd	r2, r3, [r1]
			  omega = num/den;
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <main+0x494>)
 8001150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <main+0x490>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fb43 	bl	80007e4 <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4931      	ldr	r1, [pc, #196]	; (8001228 <main+0x498>)
 8001164:	e9c1 2300 	strd	r2, r3, [r1]

			  Vout = 1.65 + (omega-0)*((2.65-1.65)/(100));
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <main+0x498>)
 800116a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116e:	a326      	add	r3, pc, #152	; (adr r3, 8001208 <main+0x478>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa0c 	bl	8000590 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	a323      	add	r3, pc, #140	; (adr r3, 8001210 <main+0x480>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff f84d 	bl	8000224 <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fc2f 	bl	80009f4 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	4a24      	ldr	r2, [pc, #144]	; (800122c <main+0x49c>)
 800119a:	6013      	str	r3, [r2, #0]
			  DACOut = Vout*4095/3.3;
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <main+0x49c>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001230 <main+0x4a0>
 80011a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011aa:	ee17 0a90 	vmov	r0, s15
 80011ae:	f7ff f997 	bl	80004e0 <__aeabi_f2d>
 80011b2:	a319      	add	r3, pc, #100	; (adr r3, 8001218 <main+0x488>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb14 	bl	80007e4 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fbf6 	bl	80009b4 <__aeabi_d2uiz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <main+0x4a4>)
 80011ce:	801a      	strh	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DACOut);
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <main+0x4a4>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4817      	ldr	r0, [pc, #92]	; (8001238 <main+0x4a8>)
 80011da:	f002 fabf 	bl	800375c <HAL_DAC_SetValue>

			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011de:	2120      	movs	r1, #32
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f003 f8ac 	bl	8004340 <HAL_GPIO_TogglePin>
			  //re-omega
			  omega_2 = omega_1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <main+0x4ac>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	4914      	ldr	r1, [pc, #80]	; (8001240 <main+0x4b0>)
 80011f0:	e9c1 2300 	strd	r2, r3, [r1]
			  omega_1 = omega;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <main+0x498>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	4910      	ldr	r1, [pc, #64]	; (800123c <main+0x4ac>)
 80011fc:	e9c1 2300 	strd	r2, r3, [r1]
  {
 8001200:	e5f1      	b.n	8000de6 <main+0x56>
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	47ae147b 	.word	0x47ae147b
 800120c:	3f847ae1 	.word	0x3f847ae1
 8001210:	66666666 	.word	0x66666666
 8001214:	3ffa6666 	.word	0x3ffa6666
 8001218:	66666666 	.word	0x66666666
 800121c:	400a6666 	.word	0x400a6666
 8001220:	20000250 	.word	0x20000250
 8001224:	20000248 	.word	0x20000248
 8001228:	20000220 	.word	0x20000220
 800122c:	20000274 	.word	0x20000274
 8001230:	457ff000 	.word	0x457ff000
 8001234:	20000270 	.word	0x20000270
 8001238:	20000120 	.word	0x20000120
 800123c:	20000228 	.word	0x20000228
 8001240:	20000230 	.word	0x20000230

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	2238      	movs	r2, #56	; 0x38
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fb14 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001266:	2000      	movs	r0, #0
 8001268:	f003 f8a8 	bl	80043bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001276:	2340      	movs	r3, #64	; 0x40
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001282:	2304      	movs	r3, #4
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001286:	2355      	movs	r3, #85	; 0x55
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f003 f942 	bl	8004524 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012a6:	f000 f9fb 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ae:	2303      	movs	r3, #3
 80012b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2104      	movs	r1, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fc40 	bl	8004b48 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012ce:	f000 f9e7 	bl	80016a0 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	; 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2220      	movs	r2, #32
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f005 fac3 	bl	8006880 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <MX_ADC1_Init+0xe8>)
 80012fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001304:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_ADC1_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001324:	2204      	movs	r2, #4
 8001326:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_ADC1_Init+0xe8>)
 800132a:	2200      	movs	r2, #0
 800132c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001330:	2201      	movs	r2, #1
 8001332:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001336:	2201      	movs	r2, #1
 8001338:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_ADC1_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_ADC1_Init+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_ADC1_Init+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	4817      	ldr	r0, [pc, #92]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001366:	f000 fe27 	bl	8001fb8 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001370:	f000 f996 	bl	80016a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_ADC1_Init+0xe8>)
 8001380:	f001 ff46 	bl	8003210 <HAL_ADCEx_MultiModeConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800138a:	f000 f989 	bl	80016a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_ADC1_Init+0xec>)
 8001390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001392:	2306      	movs	r3, #6
 8001394:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001396:	2307      	movs	r3, #7
 8001398:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139a:	237f      	movs	r3, #127	; 0x7f
 800139c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139e:	2304      	movs	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_ADC1_Init+0xe8>)
 80013ac:	f001 f8b2 	bl	8002514 <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013b6:	f000 f973 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3730      	adds	r7, #48	; 0x30
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000054 	.word	0x20000054
 80013c8:	04300002 	.word	0x04300002

080013cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2230      	movs	r2, #48	; 0x30
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fa51 	bl	8006880 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_DAC1_Init+0x6c>)
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <MX_DAC1_Init+0x70>)
 80013e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_DAC1_Init+0x6c>)
 80013e6:	f002 f92a 	bl	800363e <HAL_DAC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013f0:	f000 f956 	bl	80016a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013f4:	2302      	movs	r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001410:	2304      	movs	r3, #4
 8001412:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_DAC1_Init+0x6c>)
 8001420:	f002 f9ca 	bl	80037b8 <HAL_DAC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800142a:	f000 f939 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000120 	.word	0x20000120
 800143c:	50000800 	.word	0x50000800

08001440 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <MX_LPUART1_UART_Init+0x90>)
 8001448:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 800147e:	2200      	movs	r2, #0
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001484:	f004 fb8e 	bl	8005ba4 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f000 f907 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 8001496:	f005 f929 	bl	80066ec <HAL_UARTEx_SetTxFifoThreshold>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80014a0:	f000 f8fe 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	4809      	ldr	r0, [pc, #36]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 80014a8:	f005 f95e 	bl	8006768 <HAL_UARTEx_SetRxFifoThreshold>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80014b2:	f000 f8f5 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_LPUART1_UART_Init+0x8c>)
 80014b8:	f005 f8df 	bl	800667a <HAL_UARTEx_DisableFifoMode>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80014c2:	f000 f8ed 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000134 	.word	0x20000134
 80014d0:	40008000 	.word	0x40008000

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM2_Init+0x98>)
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM2_Init+0x98>)
 80014fc:	22a9      	movs	r2, #169	; 0xa9
 80014fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM2_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM2_Init+0x98>)
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM2_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM2_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_TIM2_Init+0x98>)
 800151c:	f003 ff7e 	bl	800541c <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001526:	f000 f8bb 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_TIM2_Init+0x98>)
 8001538:	f004 f838 	bl	80055ac <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001542:	f000 f8ad 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM2_Init+0x98>)
 8001554:	f004 fa90 	bl	8005a78 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800155e:	f000 f89f 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001c8 	.word	0x200001c8

08001570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_DMA_Init+0x50>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <MX_DMA_Init+0x50>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6493      	str	r3, [r2, #72]	; 0x48
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_DMA_Init+0x50>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_DMA_Init+0x50>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <MX_DMA_Init+0x50>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6493      	str	r3, [r2, #72]	; 0x48
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_DMA_Init+0x50>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200b      	movs	r0, #11
 80015ac:	f002 f813 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b0:	200b      	movs	r0, #11
 80015b2:	f002 f82a 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <MX_GPIO_Init+0xd4>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <MX_GPIO_Init+0xd4>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_GPIO_Init+0xd4>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_GPIO_Init+0xd4>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <MX_GPIO_Init+0xd4>)
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_GPIO_Init+0xd4>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <MX_GPIO_Init+0xd4>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a22      	ldr	r2, [pc, #136]	; (8001698 <MX_GPIO_Init+0xd4>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MX_GPIO_Init+0xd4>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_GPIO_Init+0xd4>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <MX_GPIO_Init+0xd4>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_GPIO_Init+0xd4>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f002 fe65 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <MX_GPIO_Init+0xd8>)
 800165e:	f002 fcd5 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001662:	2320      	movs	r3, #32
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f002 fcc6 	bl	800400c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2028      	movs	r0, #40	; 0x28
 8001686:	f001 ffa6 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800168a:	2028      	movs	r0, #40	; 0x28
 800168c:	f001 ffbd 	bl	800360a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	48000800 	.word	0x48000800

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_MspInit+0x44>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_MspInit+0x44>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6613      	str	r3, [r2, #96]	; 0x60
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x44>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_MspInit+0x44>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6593      	str	r3, [r2, #88]	; 0x58
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016e2:	f002 ff0f 	bl	8004504 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09e      	sub	sp, #120	; 0x78
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	2254      	movs	r2, #84	; 0x54
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f005 f8b3 	bl	8006880 <memset>
  if(hadc->Instance==ADC1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001722:	d15f      	bne.n	80017e4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001728:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800172a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800172e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fc23 	bl	8004f80 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001740:	f7ff ffae 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_ADC_MspInit+0xf8>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_ADC_MspInit+0xf8>)
 800174a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_ADC_MspInit+0xf8>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_ADC_MspInit+0xf8>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_ADC_MspInit+0xf8>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_ADC_MspInit+0xf8>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001774:	2301      	movs	r3, #1
 8001776:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001778:	2303      	movs	r3, #3
 800177a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f002 fc3f 	bl	800400c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 8001790:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_ADC_MspInit+0x100>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 8001796:	2205      	movs	r2, #5
 8001798:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017be:	2220      	movs	r2, #32
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017c8:	4809      	ldr	r0, [pc, #36]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017ca:	f002 f9ad 	bl	8003b28 <HAL_DMA_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80017d4:	f7ff ff64 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_ADC_MspInit+0xfc>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3778      	adds	r7, #120	; 0x78
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	200000c0 	.word	0x200000c0
 80017f4:	40020008 	.word	0x40020008

080017f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_DAC_MspInit+0x74>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d124      	bne.n	8001864 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_DAC_MspInit+0x78>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_DAC_MspInit+0x78>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_DAC_MspInit+0x78>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_DAC_MspInit+0x78>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_DAC_MspInit+0x78>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_DAC_MspInit+0x78>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184a:	2310      	movs	r3, #16
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f002 fbd4 	bl	800400c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	50000800 	.word	0x50000800
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b09e      	sub	sp, #120	; 0x78
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2254      	movs	r2, #84	; 0x54
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f004 fff3 	bl	8006880 <memset>
  if(huart->Instance==LPUART1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <HAL_UART_MspInit+0xa8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d136      	bne.n	8001912 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018a4:	2320      	movs	r3, #32
 80018a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fb65 	bl	8004f80 <HAL_RCCEx_PeriphCLKConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018bc:	f7ff fef0 	bl	80016a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_UART_MspInit+0xac>)
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_UART_MspInit+0xac>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_UART_MspInit+0xac>)
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0xac>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_UART_MspInit+0xac>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_UART_MspInit+0xac>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018f0:	230c      	movs	r3, #12
 80018f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001900:	230c      	movs	r3, #12
 8001902:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190e:	f002 fb7d 	bl	800400c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3778      	adds	r7, #120	; 0x78
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40008000 	.word	0x40008000
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d10b      	bne.n	800194e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler+0x4>

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 f8a2 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <DMA1_Channel1_IRQHandler+0x10>)
 80019ba:	f002 f9d8 	bl	8003d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200000c0 	.word	0x200000c0

080019c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019d0:	f002 fcd0 	bl	8004374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7ff ffea 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f004 ff31 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2e:	f7ff f9af 	bl	8000d90 <main>

08001a32 <LoopForever>:

LoopForever:
    b LoopForever
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
  ldr   r0, =_estack
 8001a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001a40:	08006940 	.word	0x08006940
  ldr r2, =_sbss
 8001a44:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001a48:	20000280 	.word	0x20000280

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>

08001a4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f001 fdb1 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f80e 	bl	8001a80 <HAL_InitTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e001      	b.n	8001a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a70:	f7ff fe1c 	bl	80016ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a74:	79fb      	ldrb	r3, [r7, #7]

}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_InitTick+0x68>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d022      	beq.n	8001ada <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_InitTick+0x6c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_InitTick+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fdbc 	bl	8003626 <HAL_SYSTICK_Config>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d809      	bhi.n	8001ace <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aba:	2200      	movs	r2, #0
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac2:	f001 fd88 	bl	80035d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_InitTick+0x70>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e007      	b.n	8001ade <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e004      	b.n	8001ade <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e001      	b.n	8001ade <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000030 	.word	0x20000030
 8001aec:	20000028 	.word	0x20000028
 8001af0:	2000002c 	.word	0x2000002c

08001af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x1c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x20>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <HAL_IncTick+0x1c>)
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	2000027c 	.word	0x2000027c
 8001b14:	20000030 	.word	0x20000030

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	2000027c 	.word	0x2000027c

08001b30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	609a      	str	r2, [r3, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3360      	adds	r3, #96	; 0x60
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <LL_ADC_SetOffset+0x44>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	03fff000 	.word	0x03fff000

08001be0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3360      	adds	r3, #96	; 0x60
 8001bee:	461a      	mov	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3360      	adds	r3, #96	; 0x60
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3360      	adds	r3, #96	; 0x60
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3360      	adds	r3, #96	; 0x60
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3330      	adds	r3, #48	; 0x30
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	4413      	add	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	211f      	movs	r1, #31
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 011f 	and.w	r1, r3, #31
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3314      	adds	r3, #20
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	0e5b      	lsrs	r3, r3, #25
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	0d1b      	lsrs	r3, r3, #20
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2107      	movs	r1, #7
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	0d1b      	lsrs	r3, r3, #20
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	431a      	orrs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0318 	and.w	r3, r3, #24
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dcc:	40d9      	lsrs	r1, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	0007ffff 	.word	0x0007ffff

08001df0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6093      	str	r3, [r2, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <LL_ADC_IsEnabled+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_ADC_IsEnabled+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_IsDisableOngoing+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_IsDisableOngoing+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f58:	f043 0204 	orr.w	r2, r3, #4
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1a9      	b.n	8002326 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fb87 	bl	80016f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff19 	bl	8001e30 <LL_ADC_IsDeepPowerDownEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff feff 	bl	8001e0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff34 	bl	8001e80 <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff18 	bl	8001e58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002028:	4b9c      	ldr	r3, [pc, #624]	; (800229c <HAL_ADC_Init+0x2e4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	4a9c      	ldr	r2, [pc, #624]	; (80022a0 <HAL_ADC_Init+0x2e8>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800203c:	e002      	b.n	8002044 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff16 	bl	8001e80 <LL_ADC_IsInternalRegulatorEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff76 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8002080:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8142 	bne.w	8002314 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 813e 	bne.w	8002314 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff23 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d141      	bne.n	800213c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_Init+0x114>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <HAL_ADC_Init+0x2ec>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10f      	bne.n	80020ec <HAL_ADC_Init+0x134>
 80020cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020d0:	f7ff ff12 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020d4:	4604      	mov	r4, r0
 80020d6:	4873      	ldr	r0, [pc, #460]	; (80022a4 <HAL_ADC_Init+0x2ec>)
 80020d8:	f7ff ff0e 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	4323      	orrs	r3, r4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e012      	b.n	8002112 <HAL_ADC_Init+0x15a>
 80020ec:	486e      	ldr	r0, [pc, #440]	; (80022a8 <HAL_ADC_Init+0x2f0>)
 80020ee:	f7ff ff03 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020f2:	4604      	mov	r4, r0
 80020f4:	486d      	ldr	r0, [pc, #436]	; (80022ac <HAL_ADC_Init+0x2f4>)
 80020f6:	f7ff feff 	bl	8001ef8 <LL_ADC_IsEnabled>
 80020fa:	4603      	mov	r3, r0
 80020fc:	431c      	orrs	r4, r3
 80020fe:	486c      	ldr	r0, [pc, #432]	; (80022b0 <HAL_ADC_Init+0x2f8>)
 8002100:	f7ff fefa 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	4323      	orrs	r3, r4
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211e:	d004      	beq.n	800212a <HAL_ADC_Init+0x172>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_ADC_Init+0x2ec>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x176>
 800212a:	4a62      	ldr	r2, [pc, #392]	; (80022b4 <HAL_ADC_Init+0x2fc>)
 800212c:	e000      	b.n	8002130 <HAL_ADC_Init+0x178>
 800212e:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <HAL_ADC_Init+0x300>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f7ff fcfa 	bl	8001b30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7f5b      	ldrb	r3, [r3, #29]
 8002140:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002146:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800214c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002152:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800215a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002166:	2b01      	cmp	r3, #1
 8002168:	d106      	bne.n	8002178 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	045b      	lsls	r3, r3, #17
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b48      	ldr	r3, [pc, #288]	; (80022bc <HAL_ADC_Init+0x304>)
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fee5 	bl	8001f92 <LL_ADC_INJ_IsConversionOngoing>
 80021c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d17f      	bne.n	80022d0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d17c      	bne.n	80022d0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021da:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d017      	beq.n	8002238 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002216:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002220:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6911      	ldr	r1, [r2, #16]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002236:	e013      	b.n	8002260 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002246:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002266:	2b01      	cmp	r3, #1
 8002268:	d12a      	bne.n	80022c0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002286:	4311      	orrs	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800228c:	430a      	orrs	r2, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	e019      	b.n	80022d0 <HAL_ADC_Init+0x318>
 800229c:	20000028 	.word	0x20000028
 80022a0:	053e2d63 	.word	0x053e2d63
 80022a4:	50000100 	.word	0x50000100
 80022a8:	50000400 	.word	0x50000400
 80022ac:	50000500 	.word	0x50000500
 80022b0:	50000600 	.word	0x50000600
 80022b4:	50000300 	.word	0x50000300
 80022b8:	50000700 	.word	0x50000700
 80022bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10c      	bne.n	80022f2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f023 010f 	bic.w	r1, r3, #15
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	1e5a      	subs	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
 80022f0:	e007      	b.n	8002302 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 020f 	bic.w	r2, r2, #15
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	; 0x5c
 8002312:	e007      	b.n	8002324 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	f043 0210 	orr.w	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002324:	7ffb      	ldrb	r3, [r7, #31]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop

08002330 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADC_Start_DMA+0x20>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_ADC_Start_DMA+0x184>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_ADC_Start_DMA+0x24>
 8002350:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_ADC_Start_DMA+0x188>)
 8002352:	e000      	b.n	8002356 <HAL_ADC_Start_DMA+0x26>
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_ADC_Start_DMA+0x18c>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fd4a 	bl	8001df0 <LL_ADC_GetMultimode>
 800235c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe02 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 809b 	bne.w	80024a6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADC_Start_DMA+0x4e>
 800237a:	2302      	movs	r3, #2
 800237c:	e096      	b.n	80024ac <HAL_ADC_Start_DMA+0x17c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_ADC_Start_DMA+0x190>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d008      	beq.n	80023a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d17a      	bne.n	8002498 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fcf6 	bl	8002d94 <ADC_Enable>
 80023a8:	4603      	mov	r3, r0
 80023aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d16d      	bne.n	800248e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_ADC_Start_DMA+0x184>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_ADC_Start_DMA+0xb4>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3b      	ldr	r2, [pc, #236]	; (80024c4 <HAL_ADC_Start_DMA+0x194>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d002      	beq.n	80023e0 <HAL_ADC_Start_DMA+0xb0>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	e003      	b.n	80023e8 <HAL_ADC_Start_DMA+0xb8>
 80023e0:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_ADC_Start_DMA+0x198>)
 80023e2:	e001      	b.n	80023e8 <HAL_ADC_Start_DMA+0xb8>
 80023e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d002      	beq.n	80023f6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	f023 0206 	bic.w	r2, r3, #6
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	661a      	str	r2, [r3, #96]	; 0x60
 800241a:	e002      	b.n	8002422 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <HAL_ADC_Start_DMA+0x19c>)
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <HAL_ADC_Start_DMA+0x1a0>)
 8002430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_ADC_Start_DMA+0x1a4>)
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	221c      	movs	r2, #28
 8002440:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0210 	orr.w	r2, r2, #16
 8002458:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3340      	adds	r3, #64	; 0x40
 8002474:	4619      	mov	r1, r3
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f001 fbfd 	bl	8003c78 <HAL_DMA_Start_IT>
 800247e:	4603      	mov	r3, r0
 8002480:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd5c 	bl	8001f44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800248c:	e00d      	b.n	80024aa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002496:	e008      	b.n	80024aa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80024a4:	e001      	b.n	80024aa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	50000100 	.word	0x50000100
 80024b8:	50000300 	.word	0x50000300
 80024bc:	50000700 	.word	0x50000700
 80024c0:	50000600 	.word	0x50000600
 80024c4:	50000500 	.word	0x50000500
 80024c8:	50000400 	.word	0x50000400
 80024cc:	08002f7f 	.word	0x08002f7f
 80024d0:	08003057 	.word	0x08003057
 80024d4:	08003073 	.word	0x08003073

080024d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0b6      	sub	sp, #216	; 0xd8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x24>
 8002532:	2302      	movs	r3, #2
 8002534:	f000 bc13 	b.w	8002d5e <HAL_ADC_ConfigChannel+0x84a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd11 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 83f3 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	f7ff fbcb 	bl	8001cfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fcff 	bl	8001f6c <LL_ADC_REG_IsConversionOngoing>
 800256e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fd0b 	bl	8001f92 <LL_ADC_INJ_IsConversionOngoing>
 800257c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002580:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 81d9 	bne.w	800293c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800258a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 81d4 	bne.w	800293c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800259c:	d10f      	bne.n	80025be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7ff fbd2 	bl	8001d52 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fb79 	bl	8001cae <LL_ADC_SetSamplingTimeCommonConfig>
 80025bc:	e00e      	b.n	80025dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f7ff fbc1 	bl	8001d52 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fb69 	bl	8001cae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	08db      	lsrs	r3, r3, #3
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d022      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800260e:	f7ff fac3 	bl	8001b98 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6919      	ldr	r1, [r3, #16]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	461a      	mov	r2, r3
 8002620:	f7ff fb0f 	bl	8001c42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_ADC_ConfigChannel+0x126>
 8002634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002638:	e000      	b.n	800263c <HAL_ADC_ConfigChannel+0x128>
 800263a:	2300      	movs	r3, #0
 800263c:	461a      	mov	r2, r3
 800263e:	f7ff fb1b 	bl	8001c78 <LL_ADC_SetOffsetSaturation>
 8002642:	e17b      	b.n	800293c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fac8 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x15c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fabd 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	e01e      	b.n	80026ae <HAL_ADC_ConfigChannel+0x19a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fab2 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800268e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800269e:	2320      	movs	r3, #32
 80026a0:	e004      	b.n	80026ac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80026a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x1b2>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	e018      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x1e4>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80026ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fa81 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fa65 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x222>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fa5a 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	e01e      	b.n	8002774 <HAL_ADC_ConfigChannel+0x260>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fa4f 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002754:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800275c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e004      	b.n	8002772 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_ConfigChannel+0x278>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	e018      	b.n	80027be <HAL_ADC_ConfigChannel+0x2aa>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e004      	b.n	80027be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80027b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027be:	429a      	cmp	r2, r3
 80027c0:	d106      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fa1e 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fa02 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x2e8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f9f7 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 021f 	and.w	r2, r3, #31
 80027fa:	e01e      	b.n	800283a <HAL_ADC_ConfigChannel+0x326>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f9ec 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800281a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800281e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e004      	b.n	8002838 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800282e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x33e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0e9b      	lsrs	r3, r3, #26
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	e016      	b.n	8002880 <HAL_ADC_ConfigChannel+0x36c>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002864:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002866:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800286a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e004      	b.n	8002880 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002880:	429a      	cmp	r2, r3
 8002882:	d106      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2200      	movs	r2, #0
 800288a:	2102      	movs	r1, #2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f9bd 	bl	8001c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2103      	movs	r1, #3
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f9a1 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_ADC_ConfigChannel+0x3aa>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2103      	movs	r1, #3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f996 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	e017      	b.n	80028ee <HAL_ADC_ConfigChannel+0x3da>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2103      	movs	r1, #3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f98b 	bl	8001be0 <LL_ADC_GetOffsetChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e003      	b.n	80028ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80028e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x3f2>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	e011      	b.n	800292a <HAL_ADC_ConfigChannel+0x416>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002916:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f968 	bl	8001c0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fad9 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 813d 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	461a      	mov	r2, r3
 800295c:	f7ff fa24 	bl	8001da8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4aa2      	ldr	r2, [pc, #648]	; (8002bf0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 812e 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x480>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b09      	cmp	r3, #9
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e019      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x4b4>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e003      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80029b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2b09      	cmp	r3, #9
 80029c0:	bf94      	ite	ls
 80029c2:	2301      	movls	r3, #1
 80029c4:	2300      	movhi	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d079      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x4d4>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	069b      	lsls	r3, r3, #26
 80029e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e6:	e015      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x500>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	069b      	lsls	r3, r3, #26
 8002a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x520>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	e017      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x550>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	ea42 0103 	orr.w	r1, r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x576>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	e018      	b.n	8002abc <HAL_ADC_ConfigChannel+0x5a8>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e003      	b.n	8002aae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002abc:	430b      	orrs	r3, r1
 8002abe:	e07e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x5c8>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	069b      	lsls	r3, r3, #26
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	e015      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x5f4>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x614>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	e017      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x644>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	61fb      	str	r3, [r7, #28]
  return result;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	ea42 0103 	orr.w	r1, r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x670>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b1e      	subs	r3, #30
 8002b7c:	051b      	lsls	r3, r3, #20
 8002b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b82:	e01b      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x6a8>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	613b      	str	r3, [r7, #16]
  return result;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e003      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b1e      	subs	r3, #30
 8002bb6:	051b      	lsls	r3, r3, #20
 8002bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7ff f8c5 	bl	8001d52 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80be 	beq.w	8002d52 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bde:	d004      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x6d6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x6ec>
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_ADC_ConfigChannel+0x6e8>)
 8002bec:	e009      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x6ee>
 8002bee:	bf00      	nop
 8002bf0:	407f0000 	.word	0x407f0000
 8002bf4:	80080000 	.word	0x80080000
 8002bf8:	50000100 	.word	0x50000100
 8002bfc:	50000300 	.word	0x50000300
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_ADC_ConfigChannel+0x854>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe ffba 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 8002c08:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_ADC_ConfigChannel+0x858>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0x70c>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a55      	ldr	r2, [pc, #340]	; (8002d70 <HAL_ADC_ConfigChannel+0x85c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d13a      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d134      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c34:	d005      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x72e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4e      	ldr	r2, [pc, #312]	; (8002d74 <HAL_ADC_ConfigChannel+0x860>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	f040 8085 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4a:	d004      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x742>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a49      	ldr	r2, [pc, #292]	; (8002d78 <HAL_ADC_ConfigChannel+0x864>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x746>
 8002c56:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <HAL_ADC_ConfigChannel+0x868>)
 8002c58:	e000      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x748>
 8002c5a:	4a43      	ldr	r2, [pc, #268]	; (8002d68 <HAL_ADC_ConfigChannel+0x854>)
 8002c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f7fe ff75 	bl	8001b56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <HAL_ADC_ConfigChannel+0x86c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	4a44      	ldr	r2, [pc, #272]	; (8002d84 <HAL_ADC_ConfigChannel+0x870>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c86:	e002      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f9      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c94:	e05a      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <HAL_ADC_ConfigChannel+0x874>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d125      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11f      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a31      	ldr	r2, [pc, #196]	; (8002d78 <HAL_ADC_ConfigChannel+0x864>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d104      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x7ac>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <HAL_ADC_ConfigChannel+0x878>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d047      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x7c0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <HAL_ADC_ConfigChannel+0x864>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x7c4>
 8002cd4:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <HAL_ADC_ConfigChannel+0x868>)
 8002cd6:	e000      	b.n	8002cda <HAL_ADC_ConfigChannel+0x7c6>
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_ADC_ConfigChannel+0x854>)
 8002cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7fe ff36 	bl	8001b56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cea:	e031      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_ADC_ConfigChannel+0x87c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d12d      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d127      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_ADC_ConfigChannel+0x864>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d14:	d004      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x80c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_ADC_ConfigChannel+0x864>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x810>
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_ADC_ConfigChannel+0x868>)
 8002d22:	e000      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x812>
 8002d24:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_ADC_ConfigChannel+0x854>)
 8002d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f7fe ff10 	bl	8001b56 <LL_ADC_SetCommonPathInternalCh>
 8002d36:	e00c      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	37d8      	adds	r7, #216	; 0xd8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	50000700 	.word	0x50000700
 8002d6c:	c3210000 	.word	0xc3210000
 8002d70:	90c00010 	.word	0x90c00010
 8002d74:	50000600 	.word	0x50000600
 8002d78:	50000100 	.word	0x50000100
 8002d7c:	50000300 	.word	0x50000300
 8002d80:	20000028 	.word	0x20000028
 8002d84:	053e2d63 	.word	0x053e2d63
 8002d88:	c7520000 	.word	0xc7520000
 8002d8c:	50000500 	.word	0x50000500
 8002d90:	cb840000 	.word	0xcb840000

08002d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f8a7 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d176      	bne.n	8002e9e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <ADC_Enable+0x114>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e062      	b.n	8002ea0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f862 	bl	8001ea8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dec:	d004      	beq.n	8002df8 <ADC_Enable+0x64>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <ADC_Enable+0x118>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <ADC_Enable+0x68>
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <ADC_Enable+0x11c>)
 8002dfa:	e000      	b.n	8002dfe <ADC_Enable+0x6a>
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <ADC_Enable+0x120>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe febc 	bl	8001b7c <LL_ADC_GetCommonPathInternalCh>
 8002e04:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d013      	beq.n	8002e36 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <ADC_Enable+0x124>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <ADC_Enable+0x128>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e28:	e002      	b.n	8002e30 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f9      	bne.n	8002e2a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e36:	f7fe fe6f 	bl	8001b18 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e3c:	e028      	b.n	8002e90 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f858 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f828 	bl	8001ea8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e58:	f7fe fe5e 	bl	8001b18 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d914      	bls.n	8002e90 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d00d      	beq.n	8002e90 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f043 0210 	orr.w	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d1cf      	bne.n	8002e3e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	8000003f 	.word	0x8000003f
 8002eac:	50000100 	.word	0x50000100
 8002eb0:	50000300 	.word	0x50000300
 8002eb4:	50000700 	.word	0x50000700
 8002eb8:	20000028 	.word	0x20000028
 8002ebc:	053e2d63 	.word	0x053e2d63

08002ec0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f826 	bl	8001f1e <LL_ADC_IsDisableOngoing>
 8002ed2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f80d 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d047      	beq.n	8002f74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d144      	bne.n	8002f74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030d 	and.w	r3, r3, #13
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10c      	bne.n	8002f12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe ffe7 	bl	8001ed0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2203      	movs	r2, #3
 8002f08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fe05 	bl	8001b18 <HAL_GetTick>
 8002f0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f10:	e029      	b.n	8002f66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f043 0210 	orr.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e023      	b.n	8002f76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f2e:	f7fe fdf3 	bl	8001b18 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d914      	bls.n	8002f66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e007      	b.n	8002f76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1dc      	bne.n	8002f2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d14b      	bne.n	8003030 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d021      	beq.n	8002ff6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fe8c 	bl	8001cd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d032      	beq.n	8003028 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d12b      	bne.n	8003028 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11f      	bne.n	8003028 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ff4:	e018      	b.n	8003028 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d111      	bne.n	8003028 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fa55 	bl	80024d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800302e:	e00e      	b.n	800304e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff fa5f 	bl	8002500 <HAL_ADC_ErrorCallback>
}
 8003042:	e004      	b.n	800304e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff fa41 	bl	80024ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003090:	f043 0204 	orr.w	r2, r3, #4
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff fa31 	bl	8002500 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <LL_ADC_IsEnabled>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <LL_ADC_IsEnabled+0x18>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_ADC_IsEnabled+0x1a>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_StartCalibration>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80030de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	609a      	str	r2, [r3, #8]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_ADC_IsCalibrationOnGoing>:
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800310e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003112:	d101      	bne.n	8003118 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_ADC_REG_IsConversionOngoing>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d101      	bne.n	800313e <LL_ADC_REG_IsConversionOngoing+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_ADCEx_Calibration_Start+0x1c>
 8003164:	2302      	movs	r3, #2
 8003166:	e04d      	b.n	8003204 <HAL_ADCEx_Calibration_Start+0xb8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fea5 	bl	8002ec0 <ADC_Disable>
 8003176:	4603      	mov	r3, r0
 8003178:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d136      	bne.n	80031ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003188:	f023 0302 	bic.w	r3, r3, #2
 800318c:	f043 0202 	orr.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6839      	ldr	r1, [r7, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff96 	bl	80030cc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031a0:	e014      	b.n	80031cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_ADCEx_Calibration_Start+0xc0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d90d      	bls.n	80031cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f023 0312 	bic.w	r3, r3, #18
 80031b8:	f043 0210 	orr.w	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e01b      	b.n	8003204 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff94 	bl	80030fe <LL_ADC_IsCalibrationOnGoing>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e2      	bne.n	80031a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f023 0303 	bic.w	r3, r3, #3
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80031ec:	e005      	b.n	80031fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	0004de01 	.word	0x0004de01

08003210 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b0a1      	sub	sp, #132	; 0x84
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0e7      	b.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003236:	2300      	movs	r3, #0
 8003238:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800323a:	2300      	movs	r3, #0
 800323c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003246:	d102      	bne.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003248:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	e009      	b.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d102      	bne.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003258:	4b6d      	ldr	r3, [pc, #436]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	e001      	b.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0be      	b.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff4f 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 8003288:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff49 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80a0 	bne.w	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800329c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 809c 	bne.w	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ac:	d004      	beq.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a55      	ldr	r2, [pc, #340]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032b8:	4b56      	ldr	r3, [pc, #344]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032ba:	e000      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032be:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d04b      	beq.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032da:	035b      	lsls	r3, r3, #13
 80032dc:	430b      	orrs	r3, r1
 80032de:	431a      	orrs	r2, r3
 80032e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ec:	d004      	beq.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a45      	ldr	r2, [pc, #276]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10f      	bne.n	8003318 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032fc:	f7ff fed3 	bl	80030a6 <LL_ADC_IsEnabled>
 8003300:	4604      	mov	r4, r0
 8003302:	4841      	ldr	r0, [pc, #260]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003304:	f7ff fecf 	bl	80030a6 <LL_ADC_IsEnabled>
 8003308:	4603      	mov	r3, r0
 800330a:	4323      	orrs	r3, r4
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e012      	b.n	800333e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003318:	483c      	ldr	r0, [pc, #240]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800331a:	f7ff fec4 	bl	80030a6 <LL_ADC_IsEnabled>
 800331e:	4604      	mov	r4, r0
 8003320:	483b      	ldr	r0, [pc, #236]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003322:	f7ff fec0 	bl	80030a6 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	431c      	orrs	r4, r3
 800332a:	483c      	ldr	r0, [pc, #240]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800332c:	f7ff febb 	bl	80030a6 <LL_ADC_IsEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	4323      	orrs	r3, r4
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d056      	beq.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800335e:	e047      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003374:	d004      	beq.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a23      	ldr	r2, [pc, #140]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10f      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003380:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003384:	f7ff fe8f 	bl	80030a6 <LL_ADC_IsEnabled>
 8003388:	4604      	mov	r4, r0
 800338a:	481f      	ldr	r0, [pc, #124]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800338c:	f7ff fe8b 	bl	80030a6 <LL_ADC_IsEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	4323      	orrs	r3, r4
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e012      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033a0:	481a      	ldr	r0, [pc, #104]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033a2:	f7ff fe80 	bl	80030a6 <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4819      	ldr	r0, [pc, #100]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033aa:	f7ff fe7c 	bl	80030a6 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	431c      	orrs	r4, r3
 80033b2:	481a      	ldr	r0, [pc, #104]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033b4:	f7ff fe77 	bl	80030a6 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4323      	orrs	r3, r4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033da:	e009      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033ee:	e000      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3784      	adds	r7, #132	; 0x84
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop
 8003408:	50000100 	.word	0x50000100
 800340c:	50000400 	.word	0x50000400
 8003410:	50000500 	.word	0x50000500
 8003414:	50000300 	.word	0x50000300
 8003418:	50000700 	.word	0x50000700
 800341c:	50000600 	.word	0x50000600

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff40 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff90 	bl	8003514 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5f 	bl	80034c0 <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff33 	bl	8003484 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa4 	bl	800357c <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e014      	b.n	800367a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	791b      	ldrb	r3, [r3, #4]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fe f8c9 	bl	80017f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e056      	b.n	8003746 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	795b      	ldrb	r3, [r3, #5]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_DAC_Start+0x20>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e050      	b.n	8003746 <HAL_DAC_Start+0xc2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2201      	movs	r2, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <HAL_DAC_Start+0xd0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	4a22      	ldr	r2, [pc, #136]	; (8003758 <HAL_DAC_Start+0xd4>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	3301      	adds	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80036da:	e002      	b.n	80036e2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3b01      	subs	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f9      	bne.n	80036dc <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d11d      	bne.n	8003738 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e014      	b.n	8003738 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2102      	movs	r1, #2
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0202 	orr.w	r2, r2, #2
 8003736:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000028 	.word	0x20000028
 8003758:	053e2d63 	.word	0x053e2d63

0800375c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e018      	b.n	80037aa <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	3308      	adds	r3, #8
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e004      	b.n	80037a0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3314      	adds	r3, #20
 800379e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	461a      	mov	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_DAC_ConfigChannel+0x1c>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e19e      	b.n	8003b16 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	795b      	ldrb	r3, [r3, #5]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_DAC_ConfigChannel+0x2c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e198      	b.n	8003b16 <HAL_DAC_ConfigChannel+0x35e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2202      	movs	r2, #2
 80037ee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d17a      	bne.n	80038ee <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037f8:	f7fe f98e 	bl	8001b18 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d13d      	bne.n	8003880 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003804:	e018      	b.n	8003838 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003806:	f7fe f987 	bl	8001b18 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d911      	bls.n	8003838 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f043 0208 	orr.w	r2, r3, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2203      	movs	r2, #3
 8003832:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e16e      	b.n	8003b16 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1df      	bne.n	8003806 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
 8003850:	e020      	b.n	8003894 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003852:	f7fe f961 	bl	8001b18 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d90f      	bls.n	8003880 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	2b00      	cmp	r3, #0
 8003868:	da0a      	bge.n	8003880 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2203      	movs	r2, #3
 800387a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e14a      	b.n	8003b16 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	2b00      	cmp	r3, #0
 8003888:	dbe3      	blt.n	8003852 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	ea02 0103 	and.w	r1, r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	409a      	lsls	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	21ff      	movs	r1, #255	; 0xff
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	ea02 0103 	and.w	r1, r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	409a      	lsls	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d11d      	bne.n	8003932 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	221f      	movs	r2, #31
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390e:	4013      	ands	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	4313      	orrs	r3, r2
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2207      	movs	r2, #7
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4013      	ands	r3, r2
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003956:	2300      	movs	r3, #0
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	e00f      	b.n	800397c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d102      	bne.n	800396a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003964:	2301      	movs	r3, #1
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	e008      	b.n	800397c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003972:	2301      	movs	r3, #1
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	e001      	b.n	800397c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	6a3a      	ldr	r2, [r7, #32]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	4013      	ands	r3, r2
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	791b      	ldrb	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_DAC_ConfigChannel+0x1f8>
 80039aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ae:	e000      	b.n	80039b2 <HAL_DAC_ConfigChannel+0x1fa>
 80039b0:	2300      	movs	r3, #0
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	4013      	ands	r3, r2
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	795b      	ldrb	r3, [r3, #5]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d102      	bne.n	80039dc <HAL_DAC_ConfigChannel+0x224>
 80039d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039da:	e000      	b.n	80039de <HAL_DAC_ConfigChannel+0x226>
 80039dc:	2300      	movs	r3, #0
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d114      	bne.n	8003a1e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80039f4:	f001 fa46 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 80039f8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_DAC_ConfigChannel+0x368>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d904      	bls.n	8003a0c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0a:	e00f      	b.n	8003a2c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4a45      	ldr	r2, [pc, #276]	; (8003b24 <HAL_DAC_ConfigChannel+0x36c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d90a      	bls.n	8003a2a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e006      	b.n	8003a2c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4313      	orrs	r3, r2
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	e000      	b.n	8003a2c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003a2a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6819      	ldr	r1, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7e:	4013      	ands	r3, r2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	4313      	orrs	r3, r2
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	22c0      	movs	r2, #192	; 0xc0
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	400a      	ands	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	ea02 0103 	and.w	r1, r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	09896800 	.word	0x09896800
 8003b24:	04c4b400 	.word	0x04c4b400

08003b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08d      	b.n	8003c56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_DMA_Init+0x138>)
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d80f      	bhi.n	8003b66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <HAL_DMA_Init+0x13c>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a45      	ldr	r2, [pc, #276]	; (8003c68 <HAL_DMA_Init+0x140>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a42      	ldr	r2, [pc, #264]	; (8003c6c <HAL_DMA_Init+0x144>)
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
 8003b64:	e00e      	b.n	8003b84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_DMA_Init+0x148>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <HAL_DMA_Init+0x140>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a3c      	ldr	r2, [pc, #240]	; (8003c74 <HAL_DMA_Init+0x14c>)
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9b6 	bl	8003f48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be4:	d102      	bne.n	8003bec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_DMA_Init+0x104>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d80c      	bhi.n	8003c2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9d6 	bl	8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e008      	b.n	8003c3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40020407 	.word	0x40020407
 8003c64:	bffdfff8 	.word	0xbffdfff8
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	bffdfbf8 	.word	0xbffdfbf8
 8003c74:	40020400 	.word	0x40020400

08003c78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_DMA_Start_IT+0x20>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e066      	b.n	8003d66 <HAL_DMA_Start_IT+0xee>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d155      	bne.n	8003d58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f8fb 	bl	8003ecc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 020e 	orr.w	r2, r2, #14
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00f      	b.n	8003d10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 020a 	orr.w	r2, r2, #10
 8003d0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e005      	b.n	8003d64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
 8003d62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2204      	movs	r2, #4
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d026      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x7a>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d021      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0204 	bic.w	r2, r2, #4
 8003dc0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 021f 	and.w	r2, r3, #31
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2104      	movs	r1, #4
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d071      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003de6:	e06c      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2202      	movs	r2, #2
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02e      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d029      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020a 	bic.w	r2, r2, #10
 8003e22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2102      	movs	r1, #2
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d038      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e58:	e033      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2208      	movs	r2, #8
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02a      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d025      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 020e 	bic.w	r2, r2, #14
 8003e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f003 021f 	and.w	r2, r3, #31
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
}
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ee2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f003 021f 	and.w	r2, r3, #31
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f202 	lsl.w	r2, r1, r2
 8003f08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d108      	bne.n	8003f2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f2a:	e007      	b.n	8003f3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d802      	bhi.n	8003f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e001      	b.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3b08      	subs	r3, #8
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	009a      	lsls	r2, r3, #2
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40020407 	.word	0x40020407
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020820 	.word	0x40020820
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020880 	.word	0x40020880

08003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fe6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	1000823f 	.word	0x1000823f
 8004008:	40020940 	.word	0x40020940

0800400c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800401a:	e15a      	b.n	80042d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2101      	movs	r1, #1
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 814c 	beq.w	80042cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d005      	beq.n	800404c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004048:	2b02      	cmp	r3, #2
 800404a:	d130      	bne.n	80040ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2203      	movs	r2, #3
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004082:	2201      	movs	r2, #1
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 0201 	and.w	r2, r3, #1
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d017      	beq.n	80040ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d123      	bne.n	800413e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	08da      	lsrs	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	08da      	lsrs	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3208      	adds	r2, #8
 8004138:	6939      	ldr	r1, [r7, #16]
 800413a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	2203      	movs	r2, #3
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80a6 	beq.w	80042cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004180:	4b5b      	ldr	r3, [pc, #364]	; (80042f0 <HAL_GPIO_Init+0x2e4>)
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	4a5a      	ldr	r2, [pc, #360]	; (80042f0 <HAL_GPIO_Init+0x2e4>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6613      	str	r3, [r2, #96]	; 0x60
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <HAL_GPIO_Init+0x2e4>)
 800418e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004198:	4a56      	ldr	r2, [pc, #344]	; (80042f4 <HAL_GPIO_Init+0x2e8>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	3302      	adds	r3, #2
 80041a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041c2:	d01f      	beq.n	8004204 <HAL_GPIO_Init+0x1f8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a4c      	ldr	r2, [pc, #304]	; (80042f8 <HAL_GPIO_Init+0x2ec>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d019      	beq.n	8004200 <HAL_GPIO_Init+0x1f4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4b      	ldr	r2, [pc, #300]	; (80042fc <HAL_GPIO_Init+0x2f0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_GPIO_Init+0x1f0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a4a      	ldr	r2, [pc, #296]	; (8004300 <HAL_GPIO_Init+0x2f4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00d      	beq.n	80041f8 <HAL_GPIO_Init+0x1ec>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a49      	ldr	r2, [pc, #292]	; (8004304 <HAL_GPIO_Init+0x2f8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <HAL_GPIO_Init+0x1e8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a48      	ldr	r2, [pc, #288]	; (8004308 <HAL_GPIO_Init+0x2fc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_GPIO_Init+0x1e4>
 80041ec:	2305      	movs	r3, #5
 80041ee:	e00a      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041f0:	2306      	movs	r3, #6
 80041f2:	e008      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041f4:	2304      	movs	r3, #4
 80041f6:	e006      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041f8:	2303      	movs	r3, #3
 80041fa:	e004      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e002      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_GPIO_Init+0x1fa>
 8004204:	2300      	movs	r3, #0
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	f002 0203 	and.w	r2, r2, #3
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	4093      	lsls	r3, r2
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004216:	4937      	ldr	r1, [pc, #220]	; (80042f4 <HAL_GPIO_Init+0x2e8>)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3302      	adds	r3, #2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004224:	4b39      	ldr	r3, [pc, #228]	; (800430c <HAL_GPIO_Init+0x300>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43db      	mvns	r3, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004248:	4a30      	ldr	r2, [pc, #192]	; (800430c <HAL_GPIO_Init+0x300>)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <HAL_GPIO_Init+0x300>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004272:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_GPIO_Init+0x300>)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004278:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_GPIO_Init+0x300>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43db      	mvns	r3, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_GPIO_Init+0x300>)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_GPIO_Init+0x300>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <HAL_GPIO_Init+0x300>)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f ae9d 	bne.w	800401c <HAL_GPIO_Init+0x10>
  }
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40010000 	.word	0x40010000
 80042f8:	48000400 	.word	0x48000400
 80042fc:	48000800 	.word	0x48000800
 8004300:	48000c00 	.word	0x48000c00
 8004304:	48001000 	.word	0x48001000
 8004308:	48001400 	.word	0x48001400
 800430c:	40010400 	.word	0x40010400

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800432c:	e002      	b.n	8004334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	041a      	lsls	r2, r3, #16
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43d9      	mvns	r1, r3
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	400b      	ands	r3, r1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800438a:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f806 	bl	80043a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40010400 	.word	0x40010400

080043a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d141      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ca:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d6:	d131      	bne.n	800443c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d8:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043de:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043f0:	4a41      	ldr	r2, [pc, #260]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2232      	movs	r2, #50	; 0x32
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	0c9b      	lsrs	r3, r3, #18
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800440e:	e002      	b.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d102      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f2      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800442a:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d158      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e057      	b.n	80044ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800443c:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004442:	4a2d      	ldr	r2, [pc, #180]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800444c:	e04d      	b.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004454:	d141      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800445e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004462:	d131      	bne.n	80044c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446a:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004474:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800447c:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004482:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2232      	movs	r2, #50	; 0x32
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	0c9b      	lsrs	r3, r3, #18
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449a:	e002      	b.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b01      	subs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ae:	d102      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f2      	bne.n	800449c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d112      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e011      	b.n	80044ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044d8:	e007      	b.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044e2:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40007000 	.word	0x40007000
 80044fc:	20000028 	.word	0x20000028
 8004500:	431bde83 	.word	0x431bde83

08004504 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800450e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004512:	6093      	str	r3, [r2, #8]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40007000 	.word	0x40007000

08004524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e2fe      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d075      	beq.n	800462e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004542:	4b97      	ldr	r3, [pc, #604]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800454c:	4b94      	ldr	r3, [pc, #592]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d102      	bne.n	8004562 <HAL_RCC_OscConfig+0x3e>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d002      	beq.n	8004568 <HAL_RCC_OscConfig+0x44>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d10b      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b8d      	ldr	r3, [pc, #564]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d05b      	beq.n	800462c <HAL_RCC_OscConfig+0x108>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d157      	bne.n	800462c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e2d9      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x74>
 800458a:	4b85      	ldr	r3, [pc, #532]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a84      	ldr	r2, [pc, #528]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e01d      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x98>
 80045a2:	4b7f      	ldr	r3, [pc, #508]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a7e      	ldr	r2, [pc, #504]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b7c      	ldr	r3, [pc, #496]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7b      	ldr	r2, [pc, #492]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 80045bc:	4b78      	ldr	r3, [pc, #480]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a77      	ldr	r2, [pc, #476]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b75      	ldr	r3, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a74      	ldr	r2, [pc, #464]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd fa9c 	bl	8001b18 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fd fa98 	bl	8001b18 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e29e      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f6:	4b6a      	ldr	r3, [pc, #424]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0xc0>
 8004602:	e014      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd fa88 	bl	8001b18 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800460c:	f7fd fa84 	bl	8001b18 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e28a      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461e:	4b60      	ldr	r3, [pc, #384]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0xe8>
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d075      	beq.n	8004726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463a:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004644:	4b56      	ldr	r3, [pc, #344]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0x136>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d002      	beq.n	8004660 <HAL_RCC_OscConfig+0x13c>
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d11f      	bne.n	80046a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004660:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x154>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e25d      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004678:	4b49      	ldr	r3, [pc, #292]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	4946      	ldr	r1, [pc, #280]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <HAL_RCC_OscConfig+0x280>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd f9f5 	bl	8001a80 <HAL_InitTick>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d043      	beq.n	8004724 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e249      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d023      	beq.n	80046f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd fa30 	bl	8001b18 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046bc:	f7fd fa2c 	bl	8001b18 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e232      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ce:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	492d      	ldr	r1, [pc, #180]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
 80046ee:	e01a      	b.n	8004726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 80046f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fd fa0c 	bl	8001b18 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004704:	f7fd fa08 	bl	8001b18 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e20e      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004716:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1e0>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d041      	beq.n	80047b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01c      	beq.n	8004774 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fd f9e5 	bl	8001b18 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004752:	f7fd f9e1 	bl	8001b18 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1e7      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ef      	beq.n	8004752 <HAL_RCC_OscConfig+0x22e>
 8004772:	e020      	b.n	80047b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <HAL_RCC_OscConfig+0x27c>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd f9c8 	bl	8001b18 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478a:	e00d      	b.n	80047a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478c:	f7fd f9c4 	bl	8001b18 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d906      	bls.n	80047a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1ca      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000
 80047a4:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a8:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80047aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ea      	bne.n	800478c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80a6 	beq.w	8004910 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047c8:	4b84      	ldr	r3, [pc, #528]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2b4>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x2b6>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	4b7f      	ldr	r3, [pc, #508]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	4a7e      	ldr	r2, [pc, #504]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ea:	4b7c      	ldr	r3, [pc, #496]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	4b79      	ldr	r3, [pc, #484]	; (80049e0 <HAL_RCC_OscConfig+0x4bc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCC_OscConfig+0x4bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a75      	ldr	r2, [pc, #468]	; (80049e0 <HAL_RCC_OscConfig+0x4bc>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fd f981 	bl	8001b18 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fd f97d 	bl	8001b18 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e183      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482c:	4b6c      	ldr	r3, [pc, #432]	; (80049e0 <HAL_RCC_OscConfig+0x4bc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d108      	bne.n	8004852 <HAL_RCC_OscConfig+0x32e>
 8004840:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	4a65      	ldr	r2, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004850:	e024      	b.n	800489c <HAL_RCC_OscConfig+0x378>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b05      	cmp	r3, #5
 8004858:	d110      	bne.n	800487c <HAL_RCC_OscConfig+0x358>
 800485a:	4b60      	ldr	r3, [pc, #384]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	4a5e      	ldr	r2, [pc, #376]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004862:	f043 0304 	orr.w	r3, r3, #4
 8004866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800486a:	4b5c      	ldr	r3, [pc, #368]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	4a5a      	ldr	r2, [pc, #360]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487a:	e00f      	b.n	800489c <HAL_RCC_OscConfig+0x378>
 800487c:	4b57      	ldr	r3, [pc, #348]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	4a56      	ldr	r2, [pc, #344]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488c:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	4a52      	ldr	r2, [pc, #328]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd f938 	bl	8001b18 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fd f934 	bl	8001b18 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e138      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	4b46      	ldr	r3, [pc, #280]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ed      	beq.n	80048ac <HAL_RCC_OscConfig+0x388>
 80048d0:	e015      	b.n	80048fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d2:	f7fd f921 	bl	8001b18 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd f91d 	bl	8001b18 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e121      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f0:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ed      	bne.n	80048da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4b35      	ldr	r3, [pc, #212]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	4a34      	ldr	r2, [pc, #208]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d03c      	beq.n	8004996 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01c      	beq.n	800495e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd f8f0 	bl	8001b18 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493c:	f7fd f8ec 	bl	8001b18 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0f2      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ef      	beq.n	800493c <HAL_RCC_OscConfig+0x418>
 800495c:	e01b      	b.n	8004996 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800495e:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496e:	f7fd f8d3 	bl	8001b18 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004976:	f7fd f8cf 	bl	8001b18 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0d5      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004988:	4b14      	ldr	r3, [pc, #80]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 800498a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ef      	bne.n	8004976 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80c9 	beq.w	8004b32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	f000 8083 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d15e      	bne.n	8004a74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a08      	ldr	r2, [pc, #32]	; (80049dc <HAL_RCC_OscConfig+0x4b8>)
 80049bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd f8a9 	bl	8001b18 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c8:	e00c      	b.n	80049e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fd f8a5 	bl	8001b18 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d905      	bls.n	80049e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0ab      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e4:	4b55      	ldr	r3, [pc, #340]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ec      	bne.n	80049ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f0:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	4b52      	ldr	r3, [pc, #328]	; (8004b40 <HAL_RCC_OscConfig+0x61c>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6a11      	ldr	r1, [r2, #32]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a00:	3a01      	subs	r2, #1
 8004a02:	0112      	lsls	r2, r2, #4
 8004a04:	4311      	orrs	r1, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a0a:	0212      	lsls	r2, r2, #8
 8004a0c:	4311      	orrs	r1, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a12:	0852      	lsrs	r2, r2, #1
 8004a14:	3a01      	subs	r2, #1
 8004a16:	0552      	lsls	r2, r2, #21
 8004a18:	4311      	orrs	r1, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a1e:	0852      	lsrs	r2, r2, #1
 8004a20:	3a01      	subs	r2, #1
 8004a22:	0652      	lsls	r2, r2, #25
 8004a24:	4311      	orrs	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a2a:	06d2      	lsls	r2, r2, #27
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	4943      	ldr	r1, [pc, #268]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a34:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a40      	ldr	r2, [pc, #256]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a40:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4a3d      	ldr	r2, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fd f864 	bl	8001b18 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fd f860 	bl	8001b18 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e066      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a66:	4b35      	ldr	r3, [pc, #212]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x530>
 8004a72:	e05e      	b.n	8004b32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a74:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd f84a 	bl	8001b18 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd f846 	bl	8001b18 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e04c      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004aa6:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	4924      	ldr	r1, [pc, #144]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004aac:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_RCC_OscConfig+0x620>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60cb      	str	r3, [r1, #12]
 8004ab2:	e03e      	b.n	8004b32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e039      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <HAL_RCC_OscConfig+0x618>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d12c      	bne.n	8004b2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d123      	bne.n	8004b2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d11b      	bne.n	8004b2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d113      	bne.n	8004b2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	019f800c 	.word	0x019f800c
 8004b44:	feeefffc 	.word	0xfeeefffc

08004b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e11e      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b91      	ldr	r3, [pc, #580]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d910      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b8e      	ldr	r3, [pc, #568]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 020f 	bic.w	r2, r3, #15
 8004b76:	498c      	ldr	r1, [pc, #560]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b8a      	ldr	r3, [pc, #552]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e106      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d073      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d129      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba4:	4b81      	ldr	r3, [pc, #516]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0f4      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bb4:	f000 f99e 	bl	8004ef4 <RCC_GetSysClockFreqFromPLLSource>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <HAL_RCC_ClockConfig+0x268>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d93f      	bls.n	8004c42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bc2:	4b7a      	ldr	r3, [pc, #488]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d033      	beq.n	8004c42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d12f      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004be2:	4b72      	ldr	r3, [pc, #456]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bea:	4a70      	ldr	r2, [pc, #448]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e024      	b.n	8004c42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c00:	4b6a      	ldr	r3, [pc, #424]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0c6      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c10:	4b66      	ldr	r3, [pc, #408]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0be      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c20:	f000 f8ce 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4a61      	ldr	r2, [pc, #388]	; (8004db0 <HAL_RCC_ClockConfig+0x268>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d909      	bls.n	8004c42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c36:	4a5d      	ldr	r2, [pc, #372]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c42:	4b5a      	ldr	r3, [pc, #360]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f023 0203 	bic.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4957      	ldr	r1, [pc, #348]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fc ff60 	bl	8001b18 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5c:	f7fc ff5c 	bl	8001b18 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e095      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 020c 	and.w	r2, r3, #12
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1eb      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d023      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c9c:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a42      	ldr	r2, [pc, #264]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ca6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cbc:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4936      	ldr	r1, [pc, #216]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d105      	bne.n	8004cea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cde:	4b33      	ldr	r3, [pc, #204]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4a32      	ldr	r2, [pc, #200]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cea:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d21d      	bcs.n	8004d34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 020f 	bic.w	r2, r3, #15
 8004d00:	4929      	ldr	r1, [pc, #164]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d08:	f7fc ff06 	bl	8001b18 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fc ff02 	bl	8001b18 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e03b      	b.n	8004d9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_RCC_ClockConfig+0x260>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1ed      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4917      	ldr	r1, [pc, #92]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	490f      	ldr	r1, [pc, #60]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d72:	f000 f825 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004d76:	4602      	mov	r2, r0
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCC_ClockConfig+0x264>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	490c      	ldr	r1, [pc, #48]	; (8004db4 <HAL_RCC_ClockConfig+0x26c>)
 8004d84:	5ccb      	ldrb	r3, [r1, r3]
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x270>)
 8004d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x274>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc fe72 	bl	8001a80 <HAL_InitTick>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40022000 	.word	0x40022000
 8004dac:	40021000 	.word	0x40021000
 8004db0:	04c4b400 	.word	0x04c4b400
 8004db4:	080068f0 	.word	0x080068f0
 8004db8:	20000028 	.word	0x20000028
 8004dbc:	2000002c 	.word	0x2000002c

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dc6:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	e047      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d102      	bne.n	8004dea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e03e      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d136      	bne.n	8004e64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e00:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d10c      	bne.n	8004e2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e14:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e1e:	68d2      	ldr	r2, [r2, #12]
 8004e20:	0a12      	lsrs	r2, r2, #8
 8004e22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	617b      	str	r3, [r7, #20]
      break;
 8004e2c:	e00c      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e2e:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	0a12      	lsrs	r2, r2, #8
 8004e3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
      break;
 8004e46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	0e5b      	lsrs	r3, r3, #25
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	3301      	adds	r3, #1
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e001      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e68:	693b      	ldr	r3, [r7, #16]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	016e3600 	.word	0x016e3600

08004e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000028 	.word	0x20000028

08004e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ea0:	f7ff fff0 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	08006900 	.word	0x08006900

08004ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ecc:	f7ff ffda 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0adb      	lsrs	r3, r3, #11
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4904      	ldr	r1, [pc, #16]	; (8004ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	08006900 	.word	0x08006900

08004ef4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d10c      	bne.n	8004f32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f18:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f22:	68d2      	ldr	r2, [r2, #12]
 8004f24:	0a12      	lsrs	r2, r2, #8
 8004f26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	617b      	str	r3, [r7, #20]
    break;
 8004f30:	e00c      	b.n	8004f4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f32:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	0a12      	lsrs	r2, r2, #8
 8004f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
    break;
 8004f4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	0e5b      	lsrs	r3, r3, #25
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	3301      	adds	r3, #1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f66:	687b      	ldr	r3, [r7, #4]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40021000 	.word	0x40021000
 8004f78:	016e3600 	.word	0x016e3600
 8004f7c:	00f42400 	.word	0x00f42400

08004f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f88:	2300      	movs	r3, #0
 8004f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8098 	beq.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa2:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	4b40      	ldr	r3, [pc, #256]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	4a3f      	ldr	r2, [pc, #252]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fca:	4b3a      	ldr	r3, [pc, #232]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a39      	ldr	r2, [pc, #228]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd6:	f7fc fd9f 	bl	8001b18 <HAL_GetTick>
 8004fda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fdc:	e009      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fde:	f7fc fd9b 	bl	8001b18 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d902      	bls.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	74fb      	strb	r3, [r7, #19]
        break;
 8004ff0:	e005      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ef      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d159      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01e      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	429a      	cmp	r2, r3
 800501e:	d019      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005020:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc fd5b 	bl	8001b18 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005064:	e00b      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fc fd57 	bl	8001b18 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d902      	bls.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	74fb      	strb	r3, [r7, #19]
            break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ec      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050a8:	e008      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	74bb      	strb	r3, [r7, #18]
 80050ae:	e005      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050bc:	7c7b      	ldrb	r3, [r7, #17]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d105      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4ba7      	ldr	r3, [pc, #668]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	4aa6      	ldr	r2, [pc, #664]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050da:	4ba1      	ldr	r3, [pc, #644]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	499d      	ldr	r1, [pc, #628]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	4b98      	ldr	r3, [pc, #608]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	4995      	ldr	r1, [pc, #596]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800511e:	4b90      	ldr	r3, [pc, #576]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	498c      	ldr	r1, [pc, #560]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005140:	4b87      	ldr	r3, [pc, #540]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	4984      	ldr	r1, [pc, #528]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005162:	4b7f      	ldr	r3, [pc, #508]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	497b      	ldr	r1, [pc, #492]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005184:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	4973      	ldr	r1, [pc, #460]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a6:	4b6e      	ldr	r3, [pc, #440]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	496a      	ldr	r1, [pc, #424]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c8:	4b65      	ldr	r3, [pc, #404]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4962      	ldr	r1, [pc, #392]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ea:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	4959      	ldr	r1, [pc, #356]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800520c:	4b54      	ldr	r3, [pc, #336]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	4951      	ldr	r1, [pc, #324]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522e:	4b4c      	ldr	r3, [pc, #304]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4948      	ldr	r1, [pc, #288]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	4940      	ldr	r1, [pc, #256]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b3b      	ldr	r3, [pc, #236]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a3a      	ldr	r2, [pc, #232]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005288:	4b35      	ldr	r3, [pc, #212]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	4932      	ldr	r1, [pc, #200]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a6:	d105      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	4924      	ldr	r1, [pc, #144]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e0:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	4916      	ldr	r1, [pc, #88]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005318:	4b11      	ldr	r3, [pc, #68]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a10      	ldr	r2, [pc, #64]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005322:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d019      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4908      	ldr	r1, [pc, #32]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800534e:	d109      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a02      	ldr	r2, [pc, #8]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535a:	60d3      	str	r3, [r2, #12]
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d015      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005370:	4b29      	ldr	r3, [pc, #164]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	4926      	ldr	r1, [pc, #152]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538e:	d105      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005390:	4b21      	ldr	r3, [pc, #132]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4a20      	ldr	r2, [pc, #128]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d015      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	4918      	ldr	r1, [pc, #96]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c6:	d105      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053c8:	4b13      	ldr	r3, [pc, #76]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a12      	ldr	r2, [pc, #72]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d015      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ee:	490a      	ldr	r1, [pc, #40]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fe:	d105      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800540c:	7cbb      	ldrb	r3, [r7, #18]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000

0800541c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e049      	b.n	80054c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fc fa6e 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 f9bc 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04c      	b.n	800557e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a26      	ldr	r2, [pc, #152]	; (800558c <HAL_TIM_Base_Start+0xc0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d01d      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a22      	ldr	r2, [pc, #136]	; (8005590 <HAL_TIM_Base_Start+0xc4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a21      	ldr	r2, [pc, #132]	; (8005594 <HAL_TIM_Base_Start+0xc8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1f      	ldr	r2, [pc, #124]	; (8005598 <HAL_TIM_Base_Start+0xcc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_TIM_Base_Start+0xd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <HAL_TIM_Base_Start+0xd4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_Base_Start+0x70>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <HAL_TIM_Base_Start+0xd8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d115      	bne.n	8005568 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_TIM_Base_Start+0xdc>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d015      	beq.n	800557a <HAL_TIM_Base_Start+0xae>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	d011      	beq.n	800557a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	e008      	b.n	800557a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e000      	b.n	800557c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40013400 	.word	0x40013400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40015000 	.word	0x40015000
 80055a8:	00010007 	.word	0x00010007

080055ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_ConfigClockSource+0x1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0f6      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x20a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80055e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6f      	ldr	r2, [pc, #444]	; (80057c0 <HAL_TIM_ConfigClockSource+0x214>)
 8005602:	4293      	cmp	r3, r2
 8005604:	f000 80c1 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005608:	4a6d      	ldr	r2, [pc, #436]	; (80057c0 <HAL_TIM_ConfigClockSource+0x214>)
 800560a:	4293      	cmp	r3, r2
 800560c:	f200 80c6 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005610:	4a6c      	ldr	r2, [pc, #432]	; (80057c4 <HAL_TIM_ConfigClockSource+0x218>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f000 80b9 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005618:	4a6a      	ldr	r2, [pc, #424]	; (80057c4 <HAL_TIM_ConfigClockSource+0x218>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f200 80be 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005620:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f000 80b1 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005628:	4a67      	ldr	r2, [pc, #412]	; (80057c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	f200 80b6 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005630:	4a66      	ldr	r2, [pc, #408]	; (80057cc <HAL_TIM_ConfigClockSource+0x220>)
 8005632:	4293      	cmp	r3, r2
 8005634:	f000 80a9 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005638:	4a64      	ldr	r2, [pc, #400]	; (80057cc <HAL_TIM_ConfigClockSource+0x220>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f200 80ae 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005640:	4a63      	ldr	r2, [pc, #396]	; (80057d0 <HAL_TIM_ConfigClockSource+0x224>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f000 80a1 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005648:	4a61      	ldr	r2, [pc, #388]	; (80057d0 <HAL_TIM_ConfigClockSource+0x224>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f200 80a6 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005650:	4a60      	ldr	r2, [pc, #384]	; (80057d4 <HAL_TIM_ConfigClockSource+0x228>)
 8005652:	4293      	cmp	r3, r2
 8005654:	f000 8099 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005658:	4a5e      	ldr	r2, [pc, #376]	; (80057d4 <HAL_TIM_ConfigClockSource+0x228>)
 800565a:	4293      	cmp	r3, r2
 800565c:	f200 809e 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005660:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005664:	f000 8091 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005668:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800566c:	f200 8096 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005674:	f000 8089 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x1de>
 8005678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567c:	f200 808e 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 8005680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005684:	d03e      	beq.n	8005704 <HAL_TIM_ConfigClockSource+0x158>
 8005686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568a:	f200 8087 	bhi.w	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	f000 8086 	beq.w	80057a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d87f      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 800569c:	2b70      	cmp	r3, #112	; 0x70
 800569e:	d01a      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x12a>
 80056a0:	2b70      	cmp	r3, #112	; 0x70
 80056a2:	d87b      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 80056a4:	2b60      	cmp	r3, #96	; 0x60
 80056a6:	d050      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x19e>
 80056a8:	2b60      	cmp	r3, #96	; 0x60
 80056aa:	d877      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 80056ac:	2b50      	cmp	r3, #80	; 0x50
 80056ae:	d03c      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x17e>
 80056b0:	2b50      	cmp	r3, #80	; 0x50
 80056b2:	d873      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d058      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1be>
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d86f      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d064      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x1de>
 80056c0:	2b30      	cmp	r3, #48	; 0x30
 80056c2:	d86b      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d060      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x1de>
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d867      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d05c      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x1de>
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d05a      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x1de>
 80056d4:	e062      	b.n	800579c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056e6:	f000 f9a7 	bl	8005a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	609a      	str	r2, [r3, #8]
      break;
 8005702:	e04f      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005714:	f000 f990 	bl	8005a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005726:	609a      	str	r2, [r3, #8]
      break;
 8005728:	e03c      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	461a      	mov	r2, r3
 8005738:	f000 f902 	bl	8005940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2150      	movs	r1, #80	; 0x50
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f95b 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005748:	e02c      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005756:	461a      	mov	r2, r3
 8005758:	f000 f921 	bl	800599e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2160      	movs	r1, #96	; 0x60
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f94b 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005768:	e01c      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005776:	461a      	mov	r2, r3
 8005778:	f000 f8e2 	bl	8005940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2140      	movs	r1, #64	; 0x40
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f93b 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005788:	e00c      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f000 f932 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 800579a:	e003      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
      break;
 80057a0:	e000      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80057a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	00100070 	.word	0x00100070
 80057c4:	00100060 	.word	0x00100060
 80057c8:	00100050 	.word	0x00100050
 80057cc:	00100040 	.word	0x00100040
 80057d0:	00100030 	.word	0x00100030
 80057d4:	00100020 	.word	0x00100020

080057d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a4c      	ldr	r2, [pc, #304]	; (800591c <TIM_Base_SetConfig+0x144>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d017      	beq.n	8005820 <TIM_Base_SetConfig+0x48>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d013      	beq.n	8005820 <TIM_Base_SetConfig+0x48>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a49      	ldr	r2, [pc, #292]	; (8005920 <TIM_Base_SetConfig+0x148>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00f      	beq.n	8005820 <TIM_Base_SetConfig+0x48>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a48      	ldr	r2, [pc, #288]	; (8005924 <TIM_Base_SetConfig+0x14c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00b      	beq.n	8005820 <TIM_Base_SetConfig+0x48>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a47      	ldr	r2, [pc, #284]	; (8005928 <TIM_Base_SetConfig+0x150>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <TIM_Base_SetConfig+0x48>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a46      	ldr	r2, [pc, #280]	; (800592c <TIM_Base_SetConfig+0x154>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_Base_SetConfig+0x48>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a45      	ldr	r2, [pc, #276]	; (8005930 <TIM_Base_SetConfig+0x158>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d108      	bne.n	8005832 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a39      	ldr	r2, [pc, #228]	; (800591c <TIM_Base_SetConfig+0x144>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d023      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d01f      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a36      	ldr	r2, [pc, #216]	; (8005920 <TIM_Base_SetConfig+0x148>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01b      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a35      	ldr	r2, [pc, #212]	; (8005924 <TIM_Base_SetConfig+0x14c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d017      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a34      	ldr	r2, [pc, #208]	; (8005928 <TIM_Base_SetConfig+0x150>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a33      	ldr	r2, [pc, #204]	; (800592c <TIM_Base_SetConfig+0x154>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a33      	ldr	r2, [pc, #204]	; (8005934 <TIM_Base_SetConfig+0x15c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a32      	ldr	r2, [pc, #200]	; (8005938 <TIM_Base_SetConfig+0x160>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a31      	ldr	r2, [pc, #196]	; (800593c <TIM_Base_SetConfig+0x164>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_Base_SetConfig+0xaa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <TIM_Base_SetConfig+0x158>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d108      	bne.n	8005894 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a18      	ldr	r2, [pc, #96]	; (800591c <TIM_Base_SetConfig+0x144>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_Base_SetConfig+0x110>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1a      	ldr	r2, [pc, #104]	; (800592c <TIM_Base_SetConfig+0x154>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x110>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <TIM_Base_SetConfig+0x15c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x110>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <TIM_Base_SetConfig+0x160>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x110>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <TIM_Base_SetConfig+0x164>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x110>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a13      	ldr	r2, [pc, #76]	; (8005930 <TIM_Base_SetConfig+0x158>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d103      	bne.n	80058f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f023 0201 	bic.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]
  }
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40015000 	.word	0x40015000
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800

08005940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800596a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 030a 	bic.w	r3, r3, #10
 800597c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f023 0210 	bic.w	r2, r3, #16
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	031b      	lsls	r3, r3, #12
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f043 0307 	orr.w	r3, r3, #7
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e074      	b.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a34      	ldr	r2, [pc, #208]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a33      	ldr	r2, [pc, #204]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a31      	ldr	r2, [pc, #196]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d022      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d01d      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d018      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a15      	ldr	r2, [pc, #84]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10c      	bne.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40015000 	.word	0x40015000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40014000 	.word	0x40014000

08005ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e042      	b.n	8005c3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fb fe53 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2224      	movs	r2, #36	; 0x24
 8005bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fb24 	bl	800623c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f825 	bl	8005c44 <UART_SetConfig>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01b      	b.n	8005c3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fba3 	bl	8006380 <UART_CheckIdleState>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c48:	b08c      	sub	sp, #48	; 0x30
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4baa      	ldr	r3, [pc, #680]	; (8005f1c <UART_SetConfig+0x2d8>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a9f      	ldr	r2, [pc, #636]	; (8005f20 <UART_SetConfig+0x2dc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cac:	4313      	orrs	r3, r2
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	f023 010f 	bic.w	r1, r3, #15
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a90      	ldr	r2, [pc, #576]	; (8005f24 <UART_SetConfig+0x2e0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d125      	bne.n	8005d34 <UART_SetConfig+0xf0>
 8005ce8:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d81a      	bhi.n	8005d2c <UART_SetConfig+0xe8>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0xb8>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d0d 	.word	0x08005d0d
 8005d00:	08005d1d 	.word	0x08005d1d
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d12:	e116      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	e112      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d22:	e10e      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2a:	e10a      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d32:	e106      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a7c      	ldr	r2, [pc, #496]	; (8005f2c <UART_SetConfig+0x2e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d138      	bne.n	8005db0 <UART_SetConfig+0x16c>
 8005d3e:	4b7a      	ldr	r3, [pc, #488]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d82d      	bhi.n	8005da8 <UART_SetConfig+0x164>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <UART_SetConfig+0x110>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d89 	.word	0x08005d89
 8005d58:	08005da9 	.word	0x08005da9
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005da9 	.word	0x08005da9
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005da9 	.word	0x08005da9
 8005d6c:	08005da9 	.word	0x08005da9
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005da9 	.word	0x08005da9
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8e:	e0d8      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d90:	2302      	movs	r3, #2
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d96:	e0d4      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9e:	e0d0      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005da0:	2308      	movs	r3, #8
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da6:	e0cc      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005da8:	2310      	movs	r3, #16
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dae:	e0c8      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5e      	ldr	r2, [pc, #376]	; (8005f30 <UART_SetConfig+0x2ec>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d125      	bne.n	8005e06 <UART_SetConfig+0x1c2>
 8005dba:	4b5b      	ldr	r3, [pc, #364]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d016      	beq.n	8005df6 <UART_SetConfig+0x1b2>
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d818      	bhi.n	8005dfe <UART_SetConfig+0x1ba>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d00a      	beq.n	8005de6 <UART_SetConfig+0x1a2>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d814      	bhi.n	8005dfe <UART_SetConfig+0x1ba>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <UART_SetConfig+0x19a>
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d008      	beq.n	8005dee <UART_SetConfig+0x1aa>
 8005ddc:	e00f      	b.n	8005dfe <UART_SetConfig+0x1ba>
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de4:	e0ad      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005de6:	2302      	movs	r3, #2
 8005de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dec:	e0a9      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005dee:	2304      	movs	r3, #4
 8005df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df4:	e0a5      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005df6:	2308      	movs	r3, #8
 8005df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfc:	e0a1      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005dfe:	2310      	movs	r3, #16
 8005e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e04:	e09d      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a4a      	ldr	r2, [pc, #296]	; (8005f34 <UART_SetConfig+0x2f0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d125      	bne.n	8005e5c <UART_SetConfig+0x218>
 8005e10:	4b45      	ldr	r3, [pc, #276]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e1c:	d016      	beq.n	8005e4c <UART_SetConfig+0x208>
 8005e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e20:	d818      	bhi.n	8005e54 <UART_SetConfig+0x210>
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d00a      	beq.n	8005e3c <UART_SetConfig+0x1f8>
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d814      	bhi.n	8005e54 <UART_SetConfig+0x210>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <UART_SetConfig+0x1f0>
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d008      	beq.n	8005e44 <UART_SetConfig+0x200>
 8005e32:	e00f      	b.n	8005e54 <UART_SetConfig+0x210>
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3a:	e082      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e42:	e07e      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4a:	e07a      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e52:	e076      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5a:	e072      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a35      	ldr	r2, [pc, #212]	; (8005f38 <UART_SetConfig+0x2f4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d12a      	bne.n	8005ebc <UART_SetConfig+0x278>
 8005e66:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e74:	d01a      	beq.n	8005eac <UART_SetConfig+0x268>
 8005e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7a:	d81b      	bhi.n	8005eb4 <UART_SetConfig+0x270>
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d00c      	beq.n	8005e9c <UART_SetConfig+0x258>
 8005e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e86:	d815      	bhi.n	8005eb4 <UART_SetConfig+0x270>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <UART_SetConfig+0x250>
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e90:	d008      	beq.n	8005ea4 <UART_SetConfig+0x260>
 8005e92:	e00f      	b.n	8005eb4 <UART_SetConfig+0x270>
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9a:	e052      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea2:	e04e      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eaa:	e04a      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb2:	e046      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eba:	e042      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <UART_SetConfig+0x2dc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d13a      	bne.n	8005f3c <UART_SetConfig+0x2f8>
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ed0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed4:	d01a      	beq.n	8005f0c <UART_SetConfig+0x2c8>
 8005ed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eda:	d81b      	bhi.n	8005f14 <UART_SetConfig+0x2d0>
 8005edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee0:	d00c      	beq.n	8005efc <UART_SetConfig+0x2b8>
 8005ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee6:	d815      	bhi.n	8005f14 <UART_SetConfig+0x2d0>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <UART_SetConfig+0x2b0>
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef0:	d008      	beq.n	8005f04 <UART_SetConfig+0x2c0>
 8005ef2:	e00f      	b.n	8005f14 <UART_SetConfig+0x2d0>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efa:	e022      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005efc:	2302      	movs	r3, #2
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f02:	e01e      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005f04:	2304      	movs	r3, #4
 8005f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0a:	e01a      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f12:	e016      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005f14:	2310      	movs	r3, #16
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1a:	e012      	b.n	8005f42 <UART_SetConfig+0x2fe>
 8005f1c:	cfff69f3 	.word	0xcfff69f3
 8005f20:	40008000 	.word	0x40008000
 8005f24:	40013800 	.word	0x40013800
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40004400 	.word	0x40004400
 8005f30:	40004800 	.word	0x40004800
 8005f34:	40004c00 	.word	0x40004c00
 8005f38:	40005000 	.word	0x40005000
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4aae      	ldr	r2, [pc, #696]	; (8006200 <UART_SetConfig+0x5bc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	f040 8097 	bne.w	800607c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d823      	bhi.n	8005f9e <UART_SetConfig+0x35a>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x318>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f9f 	.word	0x08005f9f
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f9f 	.word	0x08005f9f
 8005f6c:	08005f8f 	.word	0x08005f8f
 8005f70:	08005f9f 	.word	0x08005f9f
 8005f74:	08005f9f 	.word	0x08005f9f
 8005f78:	08005f9f 	.word	0x08005f9f
 8005f7c:	08005f97 	.word	0x08005f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fe ff8c 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8005f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f86:	e010      	b.n	8005faa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f88:	4b9e      	ldr	r3, [pc, #632]	; (8006204 <UART_SetConfig+0x5c0>)
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f8c:	e00d      	b.n	8005faa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8e:	f7fe ff17 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f94:	e009      	b.n	8005faa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f9c:	e005      	b.n	8005faa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8130 	beq.w	8006212 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	4a94      	ldr	r2, [pc, #592]	; (8006208 <UART_SetConfig+0x5c4>)
 8005fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	4413      	add	r3, r2
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d305      	bcc.n	8005fe2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d903      	bls.n	8005fea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fe8:	e113      	b.n	8006212 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2200      	movs	r2, #0
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	60fa      	str	r2, [r7, #12]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	4a84      	ldr	r2, [pc, #528]	; (8006208 <UART_SetConfig+0x5c4>)
 8005ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2200      	movs	r2, #0
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800600c:	f7fa fd42 	bl	8000a94 <__aeabi_uldivmod>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	020b      	lsls	r3, r1, #8
 8006022:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006026:	0202      	lsls	r2, r0, #8
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	6849      	ldr	r1, [r1, #4]
 800602c:	0849      	lsrs	r1, r1, #1
 800602e:	2000      	movs	r0, #0
 8006030:	460c      	mov	r4, r1
 8006032:	4605      	mov	r5, r0
 8006034:	eb12 0804 	adds.w	r8, r2, r4
 8006038:	eb43 0905 	adc.w	r9, r3, r5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	469a      	mov	sl, r3
 8006044:	4693      	mov	fp, r2
 8006046:	4652      	mov	r2, sl
 8006048:	465b      	mov	r3, fp
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa fd21 	bl	8000a94 <__aeabi_uldivmod>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4613      	mov	r3, r2
 8006058:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006060:	d308      	bcc.n	8006074 <UART_SetConfig+0x430>
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006068:	d204      	bcs.n	8006074 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a3a      	ldr	r2, [r7, #32]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e0ce      	b.n	8006212 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800607a:	e0ca      	b.n	8006212 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	d166      	bne.n	8006154 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800608a:	2b08      	cmp	r3, #8
 800608c:	d827      	bhi.n	80060de <UART_SetConfig+0x49a>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0x450>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	080060df 	.word	0x080060df
 80060a4:	080060cf 	.word	0x080060cf
 80060a8:	080060df 	.word	0x080060df
 80060ac:	080060df 	.word	0x080060df
 80060b0:	080060df 	.word	0x080060df
 80060b4:	080060d7 	.word	0x080060d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b8:	f7fe fef0 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 80060bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060be:	e014      	b.n	80060ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c0:	f7fe ff02 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 80060c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060c6:	e010      	b.n	80060ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c8:	4b4e      	ldr	r3, [pc, #312]	; (8006204 <UART_SetConfig+0x5c0>)
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060cc:	e00d      	b.n	80060ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ce:	f7fe fe77 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 80060d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060d4:	e009      	b.n	80060ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060dc:	e005      	b.n	80060ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8090 	beq.w	8006212 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	4a44      	ldr	r2, [pc, #272]	; (8006208 <UART_SetConfig+0x5c4>)
 80060f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	fbb3 f3f2 	udiv	r3, r3, r2
 8006104:	005a      	lsls	r2, r3, #1
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	441a      	add	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d916      	bls.n	800614c <UART_SetConfig+0x508>
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006124:	d212      	bcs.n	800614c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f023 030f 	bic.w	r3, r3, #15
 800612e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	b29b      	uxth	r3, r3
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	b29a      	uxth	r2, r3
 800613c:	8bfb      	ldrh	r3, [r7, #30]
 800613e:	4313      	orrs	r3, r2
 8006140:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	8bfa      	ldrh	r2, [r7, #30]
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	e062      	b.n	8006212 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006152:	e05e      	b.n	8006212 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006158:	2b08      	cmp	r3, #8
 800615a:	d828      	bhi.n	80061ae <UART_SetConfig+0x56a>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x520>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	080061af 	.word	0x080061af
 8006174:	0800619f 	.word	0x0800619f
 8006178:	080061af 	.word	0x080061af
 800617c:	080061af 	.word	0x080061af
 8006180:	080061af 	.word	0x080061af
 8006184:	080061a7 	.word	0x080061a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fe fe88 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 800618c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800618e:	e014      	b.n	80061ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fe fe9a 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 8006194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006196:	e010      	b.n	80061ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <UART_SetConfig+0x5c0>)
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800619c:	e00d      	b.n	80061ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619e:	f7fe fe0f 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 80061a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061a4:	e009      	b.n	80061ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061ac:	e005      	b.n	80061ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061b8:	bf00      	nop
    }

    if (pclk != 0U)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d028      	beq.n	8006212 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	4a10      	ldr	r2, [pc, #64]	; (8006208 <UART_SetConfig+0x5c4>)
 80061c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	441a      	add	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d910      	bls.n	800620c <UART_SetConfig+0x5c8>
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d20c      	bcs.n	800620c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60da      	str	r2, [r3, #12]
 80061fc:	e009      	b.n	8006212 <UART_SetConfig+0x5ce>
 80061fe:	bf00      	nop
 8006200:	40008000 	.word	0x40008000
 8006204:	00f42400 	.word	0x00f42400
 8006208:	08006908 	.word	0x08006908
      }
      else
      {
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2201      	movs	r2, #1
 8006216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2201      	movs	r2, #1
 800621e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2200      	movs	r2, #0
 8006226:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800622e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006232:	4618      	mov	r0, r3
 8006234:	3730      	adds	r7, #48	; 0x30
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800623c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633a:	d10a      	bne.n	8006352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b098      	sub	sp, #96	; 0x60
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006390:	f7fb fbc2 	bl	8001b18 <HAL_GetTick>
 8006394:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d12f      	bne.n	8006404 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f88e 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d022      	beq.n	8006404 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d2:	653b      	str	r3, [r7, #80]	; 0x50
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
 80063de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e063      	b.n	80064cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d149      	bne.n	80064a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641a:	2200      	movs	r2, #0
 800641c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f857 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d03c      	beq.n	80064a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	623b      	str	r3, [r7, #32]
   return(result);
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
 800644c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	60fb      	str	r3, [r7, #12]
   return(result);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	64bb      	str	r3, [r7, #72]	; 0x48
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647e:	61fa      	str	r2, [r7, #28]
 8006480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	69b9      	ldr	r1, [r7, #24]
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	617b      	str	r3, [r7, #20]
   return(result);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e012      	b.n	80064cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3758      	adds	r7, #88	; 0x58
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e4:	e04f      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d04b      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fb fb13 	bl	8001b18 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e04e      	b.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d037      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d034      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d031      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d110      	bne.n	8006552 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2208      	movs	r2, #8
 8006536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f838 	bl	80065ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2208      	movs	r2, #8
 8006542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e029      	b.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006560:	d111      	bne.n	8006586 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800656a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f81e 	bl	80065ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e00f      	b.n	80065a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d0a0      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b095      	sub	sp, #84	; 0x54
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
 80065d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e6      	bne.n	80065b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fe:	f023 0301 	bic.w	r3, r3, #1
 8006602:	64bb      	str	r3, [r7, #72]	; 0x48
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800660c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e3      	bne.n	80065e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d118      	bne.n	800665a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	60bb      	str	r3, [r7, #8]
   return(result);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f023 0310 	bic.w	r3, r3, #16
 800663c:	647b      	str	r3, [r7, #68]	; 0x44
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	613b      	str	r3, [r7, #16]
   return(result);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e6      	bne.n	8006628 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800666e:	bf00      	nop
 8006670:	3754      	adds	r7, #84	; 0x54
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_UARTEx_DisableFifoMode+0x16>
 800668c:	2302      	movs	r3, #2
 800668e:	e027      	b.n	80066e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	; 0x24
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006700:	2302      	movs	r3, #2
 8006702:	e02d      	b.n	8006760 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	; 0x24
 8006710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f84f 	bl	80067e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02d      	b.n	80067dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2224      	movs	r2, #36	; 0x24
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f811 	bl	80067e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006804:	e031      	b.n	800686a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006806:	2308      	movs	r3, #8
 8006808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800680a:	2308      	movs	r3, #8
 800680c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	0e5b      	lsrs	r3, r3, #25
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	0f5b      	lsrs	r3, r3, #29
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	7b3a      	ldrb	r2, [r7, #12]
 8006832:	4911      	ldr	r1, [pc, #68]	; (8006878 <UARTEx_SetNbDataToProcess+0x94>)
 8006834:	5c8a      	ldrb	r2, [r1, r2]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800683a:	7b3a      	ldrb	r2, [r7, #12]
 800683c:	490f      	ldr	r1, [pc, #60]	; (800687c <UARTEx_SetNbDataToProcess+0x98>)
 800683e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006840:	fb93 f3f2 	sdiv	r3, r3, r2
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	7b7a      	ldrb	r2, [r7, #13]
 8006850:	4909      	ldr	r1, [pc, #36]	; (8006878 <UARTEx_SetNbDataToProcess+0x94>)
 8006852:	5c8a      	ldrb	r2, [r1, r2]
 8006854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006858:	7b7a      	ldrb	r2, [r7, #13]
 800685a:	4908      	ldr	r1, [pc, #32]	; (800687c <UARTEx_SetNbDataToProcess+0x98>)
 800685c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	08006920 	.word	0x08006920
 800687c:	08006928 	.word	0x08006928

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4d0d      	ldr	r5, [pc, #52]	; (80068c8 <__libc_init_array+0x38>)
 8006894:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006896:	1b64      	subs	r4, r4, r5
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	2600      	movs	r6, #0
 800689c:	42a6      	cmp	r6, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	4d0b      	ldr	r5, [pc, #44]	; (80068d0 <__libc_init_array+0x40>)
 80068a2:	4c0c      	ldr	r4, [pc, #48]	; (80068d4 <__libc_init_array+0x44>)
 80068a4:	f000 f818 	bl	80068d8 <_init>
 80068a8:	1b64      	subs	r4, r4, r5
 80068aa:	10a4      	asrs	r4, r4, #2
 80068ac:	2600      	movs	r6, #0
 80068ae:	42a6      	cmp	r6, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b8:	4798      	blx	r3
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c2:	4798      	blx	r3
 80068c4:	3601      	adds	r6, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	08006938 	.word	0x08006938
 80068cc:	08006938 	.word	0x08006938
 80068d0:	08006938 	.word	0x08006938
 80068d4:	0800693c 	.word	0x0800693c

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
